<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tevinson&#39;s Blog</title>
  
  <subtitle>Vault 13</subtitle>
  <link href="https://www.tevinson997.space/atom.xml" rel="self"/>
  
  <link href="https://www.tevinson997.space/"/>
  <updated>2022-03-21T16:00:00.000Z</updated>
  <id>https://www.tevinson997.space/</id>
  
  <author>
    <name>先念</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【论文汉译】粒子系统 by William T.Reeves</title>
    <link href="https://www.tevinson997.space/2022/03/21/%E3%80%90%E8%AE%BA%E6%96%87%E6%B1%89%E8%AF%91%E3%80%91%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F%20by%20William%20T.Reeves/"/>
    <id>https://www.tevinson997.space/2022/03/21/%E3%80%90%E8%AE%BA%E6%96%87%E6%B1%89%E8%AF%91%E3%80%91%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F%20by%20William%20T.Reeves/</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2022-03-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p><font size = 3>本文章为 William T.Reeves 在1983年于期刊 <strong>ACM Transactions on Graphics</strong> 发表的文章 <em>Particle Systems A Technique for Modeling a Class of Fuzzy Objects</em> 的个人汉译，翻译过程中使用了电子词典等辅助工具，仅供学习交流使用，严禁转载。</font></p><h1 id="原文版权声明"><a href="#原文版权声明" class="headerlink" title="原文版权声明"></a>原文版权声明</h1><p><font face = "Times New Roman" size = 3>Author’s address: William T. Reeves, Lucasfilm Ltd, P.O. Box 2009, San Rafael, CA 94912. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.<br>© ACM 0-89791-109-1/83/007/0359</font></p><hr><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><font face = "Times New Roman" size = 3><h2 id="Particle-Systems-A-Technique-for-Modeling-a-Class-of-Fuzzy-Objects"><a href="#Particle-Systems-A-Technique-for-Modeling-a-Class-of-Fuzzy-Objects" class="headerlink" title="Particle Systems A Technique for Modeling a Class of Fuzzy Objects"></a>Particle Systems A Technique for Modeling a Class of Fuzzy Objects</h2><h3 id="WILLIAM-T-REEVES-Lucasfilm-Ltd"><a href="#WILLIAM-T-REEVES-Lucasfilm-Ltd" class="headerlink" title="WILLIAM T. REEVES Lucasfilm Ltd"></a>WILLIAM T. REEVES Lucasfilm Ltd</h3><hr><p>This paper introduces particle systems–a method for modeling fuzzy objects such as fire, clouds, and water. Particle systems model an object as a cloud of primitive particles that define its volume. Over a period of time, particles are generated into the system, move and change form within the system, and die from the system. The resulting model is able to represent motion, changes of form, and dynamics that are not possible with classical surface-based representations. The particles can easily be motion blurred, and therefore do not exhibit temporal aliasing or strobing. Stochastic processes are used to generate and control the many particles within a particle system. The application of particle systems to the wall of fire element from the Genesis Demo sequence of the film <em>Star Trek II: The Wrath of Khan</em> [10] is presented.<br>Categories and Subject Descriptors: I.3.3 [Computer Graphics]: Picture/Image Generation; I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism<br>General Terms: Algorithms, Design<br>Additional Key Words and Phrases: Motion blur, stochastic modeling, temporal aliasing, dynamic objects</p><hr><h3 id="1-INTRODUCTION"><a href="#1-INTRODUCTION" class="headerlink" title="1. INTRODUCTION"></a>1. INTRODUCTION</h3><p>Modeling phenomena such as clouds, smoke, water, and fire has proved difficult with the existing techniques of computer image synthesis. These “fuzzy” objects do not have smooth, well-defined, and shiny surfaces; instead their surfaces are irregular, complex, and ill defined. We are interested in their dynamic and fluid changes in shape and appearance. They are not rigid objects nor can their motions be described by the simple affine transformations that are common in computer graphics.<br>&nbsp; &nbsp;This paper presents a method for the modeling of fuzzy objects that we call particle systems. The representation of particle systems differs in three basic ways from representations normally used in image synthesis. First, an object is represented not by a set of primitive surface elements, such as polygons or patches, that define its boundary, but as clouds of primitive particles that define its volume. Second, a particle system is not a static entity. Its particles change form and move with the passage of time. New particles are “born” and old particles “die.” Third, an object represented by a particle system is not deterministic, since its shape and form are not completely specified. Instead, stochastic processes are used to create and change an object’s shape and appearance.<br>&nbsp; &nbsp;In modeling fuzzy objects, the particle system approach has several important advantages over classical surface-oriented techniques. First, a particle (for now, think of a particle as a point in three-dimensional space) is a much simpler primitive than a polygon, the simplest of the surface representations. Therefore, in the same amount of computation time one can process more of the basic primitives and produce a more complex image. Because a particle is simple, it is also easy to motion-blur. Motion-blurring of fast-moving objects for the removal of temporal aliasing effects has been largely ignored in computer image synthesis to date. A second advantage is that the model definition is procedural and is controlled by random numbers. Therefore, obtaining a highly detailed model does not necessarily require a great deal of human design time as is often the case with existing surface-based systems. Because it is procedural, a particle system can adjust its level of detail to suit a specific set of viewing parameters. As with fractal surfaces [5], zooming in on a particle system can reveal more and more detail. Third, particle systems model objects that are “alive,” that is, they change form over a period of time. It is difficult to represent complex dynamics of this form with surface-based modeling techniques.<br>&nbsp; &nbsp;Modeling objects as collections of particles is not a new idea. Fifteen years ago, the earliest computer video games depicted exploding spaceships with many little glowing dots that filled the screen. Point sources have been used as a graphics data type in many three-dimensional modeling systems (e.g., the early Evans and Sutherland flight simulators), although there are few real references to them in the literature. Roger Wilson at Ohio State [4] used particles to model smoke emerging from a smokestack. There were neither stochastic controls nor dynamics in his model. Alvy Ray Smith and Jim Blinn used particles to model star creation and death in galaxies for the Cosmos series [11]. Alan Norton [9] used particles to generate and display three-dimensional fractal shapes. Jim Blinn [3] discussed light reflection functions for simulating light passing through and being reflected by layers of particles. His technique was used to produce images of the rings of Saturn. Blinn did not address the fuzzy object modeling problem which is the topic of this paper. Volumetric representations have also been proposed as viable alternatives to surface representations. Solid modeling [ 13] is a form of volumetric representation, as is the work of Norm Badler and Joe O’Rourke on “bubbleman” [2]. The use of stochastic modeling relates our work to the recent advances in fractal modeling [5].<br>&nbsp; &nbsp;Section 2 decribes the basic framework of particle systems in more detail. Section 3 examines how particle systems were used to produce the fire element in the Genesis Demo sequence from the movie <em>Star Trek II: The Wrath of Khan</em> [10]. Section 4 presents several other applications of particle systems, and Section 5 discusses ongoing and future research in this area.</p><h3 id="2-BASIC-MODEL-OF-PARTICLE-SYSTEMS"><a href="#2-BASIC-MODEL-OF-PARTICLE-SYSTEMS" class="headerlink" title="2. BASIC MODEL OF PARTICLE SYSTEMS"></a>2. BASIC MODEL OF PARTICLE SYSTEMS</h3><p>A particle system is a collection of many minute particles that together represent a fuzzy object. Over a period of time, particles are generated into a system, move and change from within the system, and die from the system.<br>&nbsp; &nbsp;To compute each frame in a motion sequence, the following sequence of steps is performed: (1) new particles are generated into the system, (2) each new particle is assigned its individual attributes, (3) any particles that have existed within the system past their prescribed lifetime are extinguished, (4) the remaining particles are moved and transformed according to their dynamic attributes, and finally (5) an image of the living particles is rendered in a frame buffer. The particle system can be programmed to execute any set of instructions at each step. Because it is procedural, this approach can incorporate any computational model that describes the appearance or dynamics of the object. For example, the motions and transformations of particles could be tied to the solution of a system of partial differential equations, or particle attributes could be assigned on the basis of statistical mechanics. We can, therefore, take advantage of models which have been developed in other scientific or engineering disciplines.<br>&nbsp; &nbsp;In the research presented here, we use simple stochastic processes as the procedural elements of each step in the generation of a frame. To control the shape, appearance, and dynamics of the particles within a particle system, the model designer has access to a set of parameters. Stochastic processes that randomly select each particle’s appearance and movement are constrained by these parameters. In general, each parameter specifies a range in which a particle’s value must lie. Normally, a range is specified by providing its mean value and its maximum variance.<br>&nbsp; &nbsp;The following subsections describe in more detail the basic model for particle systems, and how they are controlled and specified within the software we have written.</p><h4 id="2-1-Particle-Generation"><a href="#2-1-Particle-Generation" class="headerlink" title="2.1 Particle Generation"></a>2.1 Particle Generation</h4><p>Particles are generated into a particle system by means of controlled stochastic processes. One process determines the number of particles entering the system during each interval of time, that is, at a given frame. The number of particles generated is important because it strongly influences the density of the fuzzy object.<br>&nbsp; &nbsp;The model designer can choose to control the number of new particles in one of two ways. In the first method, the designer controls the mean number of particles generated at a frame and its variance. The actual number of particles generated at frame $ f $ is<br>$$ NParts_f = MeanParts_f + Rand() \times VarParts_f, $$<br>where $ Rand $ is a procedure returning a uniformly distributed random number between -1.0 and + 1.0, $ MeanParts_f $ the mean number of particles, and $ VarParts_f $ its variance.<br>&nbsp; &nbsp;In the second method, the number of new particles depends on the screen size of the object. The model designer controls the mean number of particles generated per unit of screen area and its variance. The procedural particle system can determine the view parameters at a particular frame, calculate the approximate screen area that it covers, and set the number of new particles accordingly. The corresponding equation is<br>$$ NParts_f = (MeanParts_{sa_f} + Rand() \times VarParts_{sa_f}) \times ScreenArea, $$<br>where $ MeanParts_{sa} $ is the mean per screen area, $ VarParts_{sa_f} $ its variance, and $ ScreenArea $ the particle system’s screen area. This method controls the level of detail of the particle system and, therefore, the time required to render its image. For example, there is no need to generate 100,000 particles in an object that covers 4 pixels on the screen.<br>&nbsp; &nbsp;To enable a particle system to grow or shrink in intensity, the designer is able to vary over time the mean number of particles generated per frame (i.e., $ MeanParts_f $ and $ MeanParts_{sa_f} $ are, as used above, functions of frame number). Currently, we use a simple linear function<br>$$ MeanParts_f = InitialMeanParts + DeltaMeanParts \times (f - f_0) $$<br>or<br>$$ MeanParts_{sa_f} = InitialMeanParts_{sa} + DeltaMeanParts_{sa} \times (f - f_0), $$<br>where $ f $ is the current frame, $ f_0 $ the first frame during which the particle system is alive, $ InitialMeansParts $ the mean number of particles at this first frame, and $ VarParts_{sa_f} $ its rate of change. The variance controls, $ VarParts_f $ and $ VarParts_{sa_f} $, are currently constant over all frames. More sophisticated quadratic,<br>cubic, or perhaps even stochastic variations in both the mean and variance parameters would be easy to add.<br>&nbsp; &nbsp;To control the particle generation of a particle system, therefore, the designer specifies $ f_0 $ and either the parameters $ InitialMeanParts $ , $ DeltaMeanParts $ , and $ VarParts $, or the parameters $ InitialMeanParts_{sa} $ , $ DeltaMeanParts_{sa} $ , and $ VarParts_{sa} $.  </p><h4 id="2-2-Particle-Attributes"><a href="#2-2-Particle-Attributes" class="headerlink" title="2.2 Particle Attributes"></a>2.2 Particle Attributes</h4><p>For each new particle generated, the particle system must determine values for the following attributes:<br>(1) initial position,<br>(2) initial velocity (both speed and direction),<br>(3) initial size,<br>(4) initial color,<br>(5) initial transparency,<br>(6) shape,<br>(7) lifetime.<br>Several parameters of a particle system control the initial position of its particles. A particle system has a position in three-dimensional space that defines its origin. Two angles of rotation about a coordinate system through this origin give it an orientation. A particle system also has a generation shape which defines a region about its origin into which newly born particles are randomly placed. Among the generation shapes we have implemented are: a sphere of radius $ r $, a circle of radius $ r $ in the $ x-y $ plane of its coordinate system, and a rectangle of length $ l $ and width $ w $ in the $ x-y $ plane of its coordinate system. Figure 1 shows a typical particle system with a spherical generation shape. More complicated generation shapes based on the laws of nature or on chaotic attractors [1] have been envisioned but not yet implemented.<br><img src="1.png"><br><font size = 2><center>Fig. 1. Typical particle system with spherical generation shape.</center></font><br>&nbsp; &nbsp;The generation shape of a particle system also describes the initial direction in which new particles move. In a spherical generation shape, particles move outward away from the origin of the particle system. In a circular or rectangular shape, particles move upward from the $ x-y $ plane, but are allowed to vary from the vertical according to an “ejection” angle, which is another parameter (see Figure 3). The initial speed of a particle is determined by<br>$$ InitialSpeed = MeanSpeed + Rand() \times VarSpeed, $$<br>where $ MeanSpeed $ and $ VarSpeed $ are two other parameters of the particle system, the mean speed and its variance.<br>&nbsp; &nbsp;To determine a particle’s initial color, a particle system is given an average color,$ ^1 $ and the maximum deviation from that color. Particle transparency and particle size are also determined by mean values and maximum variations. The equations are similar to the one given above for initial speed.<br>&nbsp; &nbsp;A particle system has a parameter that specifies the shape of each of the particles it generates. The particle shapes implemented so far are spherical, rectangular, and streaked spherical. The latter is used to motion-blur particles– a very important feature when modeling fast-moving objects. We discuss streaking particles in more detail in Sections 2.5 and 3.<br>&nbsp; &nbsp;The number of possible attribute control parameters and their variants is endless. We are presenting those that we have found to be most useful and interesting.</p><h4 id="2-3-Particle-Dynamics"><a href="#2-3-Particle-Dynamics" class="headerlink" title="2.3 Particle Dynamics"></a>2.3 Particle Dynamics</h4><p>Individual particles within a particle system move in three-dimensional space and also change over time in color, transparency, and size.<br>&nbsp; &nbsp;To move a particle from one frame to the next is a simple matter of adding its velocity vector to its position vector. To add more complexity, a particle system also uses an acceleration factor to modify the velocity of its particles from frame to frame. With this parameter the model designer can simulate gravity and cause particles to move in parabolic arcs rather than in straight lines.<br>&nbsp; &nbsp;A particle’s color changes over time as prescribed by the rate-of-color-change parameter. The transparency and size of particles are controlled in exactly the same way. In our implementation, these rates of change are global for all particles in a particle system, but one can easily imagine making this parameter stochastic too.</p><h4 id="2-4-Particle-Extinction"><a href="#2-4-Particle-Extinction" class="headerlink" title="2.4 Particle Extinction"></a>2.4 Particle Extinction</h4><p>When it is generated, a particle is given a lifetime measured in frames. As each frame is computed, this lifetime is decremented. A particle is killed when its lifetime reaches zero.<br>&nbsp; &nbsp;Other mechanisms, if enabled, arrange for particles to be killed because they can contribute nothing to the image. If the intensity of a particle, calculated from its color and transparency, drops below a specified threshold, the particle is killed. A particle that moves more than a given distance in a given direction from the origin of its parent particle system may also be killed. This mechanism can be used to clip away particles that stray outside a region of interest.$ ^2 $</p><h4 id="2-5-Particle-Rendering"><a href="#2-5-Particle-Rendering" class="headerlink" title="2.5 Particle Rendering"></a>2.5 Particle Rendering</h4><p>Once the position and appearance parameters of all particles have been calculated for a frame, the rendering algorithm makes a picture. The general particle rendering problem is as complicated as the rendering of objects composed of the more common graphical primitives, such as polygons and curved surfaces. Particles can obscure other particles that are behind them in screen depth. They can be transparent and can cast shadows on other particles. Furthermore, particles can coexist in a scene with objects modeled by surface-based primitives, and these objects can intersect with the particles.<br>&nbsp; &nbsp;In our existing system, two assumptions allow us to simplify the rendering algorithm. First, we assume that particle systems do not intersect with other surface-based modeling primitives, and hence our rendering algorithm need only handle particles. Objects modeled using other techniques are composited together with particle system objects in a postrendering compositing stage. In order for a particle system to intersect or be behind other objects, the rendering system will split the image of a particle system into subimages based on clipping planes defined in the model coordinate space. These subimages are then combined with other images in the compositing stage.<br>&nbsp; &nbsp;The other simplifying assumption made in our current rendering system is that each particle can be displayed as a point light source. With this assumption,determining hidden surfaces is no longer a problem. Each particle adds a bit of light to the pixels that it covers. A particle behind another particle is not obscured but rather adds more light to the pixels covered. The amount of light added, and its color depend on the particle’s transparency and color. Currently, the amount of light added does not depend on the distance between the particle and the viewing position, but that would be an easy extension. The viewing transformation, the particle’s size, and its shape determine which pixels are covered. All particle shapes are drawn antialiased in order to prevent temporal aliasing and strobing. Light may be added to a pixel by many particles, so the rendering algorithm clamps the individual red, green, and blue intensities at the maximum intensity value of the frame buffer instead of letting them wrap around.<br>&nbsp; &nbsp;With this algorithm and assumptions, no sorting of the particles is needed. They are rendered into the frame buffer in whatever order they are generated. Shadows’are no longer a problem, since particles do not reflect but emit light.</p><h4 id="2-6-Particle-Hierarchy"><a href="#2-6-Particle-Hierarchy" class="headerlink" title="2.6 Particle Hierarchy"></a>2.6 Particle Hierarchy</h4><p>Our system has a mechanism that supports the formation and control of particle system hierarchies. The model designer creates a particle system in which the particles are themselves particle systems. When the parent particle system is transformed, so are all of its descendant particle systems and their particles. The parent particle system’s mean color and its variance are used to select the mean color and variance of the offspring particle systems using the same equations presented earlier. The number of new particle systems generated at a frame is based on the parent’s particle generation rate. The other parameters of the parent similarly affect those of its children. The data structure used to represent the hierarchy is a tree.<br>&nbsp; &nbsp;A hierarchy can be used to exert global control on a complicated fuzzy object that is composed of many particle systems. For example, a cloud might be composed of many particle systems, each representing a billowing region of water particles. A parent particle system could group these all together and control the cloud’s global movement and appearance as influenced by the wind and terrain.</p><h3 id="3-USING-PARTICLE-SYSTEMS-TO-MODEL-A-WALL-OF-FIRE-AND-EXPLOSIONS"><a href="#3-USING-PARTICLE-SYSTEMS-TO-MODEL-A-WALL-OF-FIRE-AND-EXPLOSIONS" class="headerlink" title="3. USING PARTICLE SYSTEMS TO MODEL A WALL OF FIRE AND EXPLOSIONS"></a>3. USING PARTICLE SYSTEMS TO MODEL A WALL OF FIRE AND EXPLOSIONS</h3><p>The Genesis Demo sequence [14] from the movie <em>Star Trek II: The Wrath of Khan</em> [10] was generated by the Computer Graphics project of Lucasfilm Ltd. The sequence depicts the transformation of a dead, moonlike planet into a warm, earthlike planet by an experimental device called the Genesis bomb. In a computer-simulated demonstration, the bomb hits the planet’s surface and an expanding wall of fire spreads out from the point of impact to eventually “cleanse” the entire planet. The planet’s surface begins to buckle, mountains grow, and oceans, vegetation, and an atmosphere form to produce an earthlike environment.<br>&nbsp; &nbsp;The wall-of-fire element in the Genesis Demo was generated using a two-level hierarchy of particle systems. The top-level system was centered at the impact point of the genesis bomb. It generated particles which were themselves particle systems. Figure 2 illustrates the positions of these second-level particle systems and how they formed expanding concentric rings on the surface of the planet.<br><img src="2.png"><br><font size = 2><center>Fig. 2. Distribution of particle systems on the planet’s surface.</center></font><br>The number of new particle systems generated in each ring was based on the circumference of the ring and a controlling density parameter. New particle systems were spaced randomly around the ring. Particle systems overlapping others in the same or adjacent rings gave the ring a solid, continuous look.<br>&nbsp; &nbsp;The second-level particle systems began generating particles at varying times on the basis of their distance from the point of impact. By varying the starting times of the particle systems, the effect of an expanding wall of fire was produced.<br>&nbsp; &nbsp;The second-level particle systems were modeled to look like explosions. Figure 3 shows an example. The generation shape was a circle on the surface of the planet. Each particle system was oriented so that particles, generated at random positions within the circle, flew upward away from the planet’s surface. The initial direction of the particles’ movement was constrained by the system’s ejection angle to fall within the region bounded by the inverted cone shown in Figure 3. As particles flew upward, the gravity parameter pulled them back down to the planet’s surface, giving them a parabolic motion path. The number of particles generated per frame was based on the amount of screen area covered by the particle system.<br>&nbsp; &nbsp;The individual particle systems were not identical. Their average color and the rates at which the colors changed were inherited from the parent particle system, but varied stochastically. The initial mean velocity, generation circle radius, ejection angle, mean particle size, mean lifetime, mean particle generation rate, and mean particle transparency parameters were also based on their parent’s<br><img src="3.png"><br><font size = 2><center>Fig. 3. Form of an explosion-like particle system.</center></font><br>parameters, but varied stochastically. Varying the mean velocity parameter caused the explosions to be of different heights.<br>&nbsp; &nbsp;All particles generated by the second-level particle systems were predominately red in color with a touch of green. Recall from Section 2.5 that particles are treated as point light sources and that colors are added, not matted, into a pixel. When many particles covered a pixel, as was the case near the center and base of each explosion, the red component was quickly clamped at full intensity and the green component increased to a point where the resulting color was orange and even yellow. Thus, the heart of the explosion had a hot yellow-orange glow which faded off to shades of red elsewhere. Actually, a small blue component caused pixels covered by very many particles to appear white. The rate at which a particle’s color changed simulated the cooling of a glowing piece of some hypothetical material. The green and blue components dropped off quickly, and the red followed at a slower rate. Particles were killed when their lifetime expired, when their intensity fell below the minimum intensity parameter, or if they happened to fall below the surface of the planet.<br>&nbsp; &nbsp;A quickly moving object leaves a blurred image on the retina of the human eye. When a motion picture camera is used to film live action at 24 frames per second, the camera shutter typically remains open for 1/50 of a second. The image captured on a frame is actually an integration of approximately half the motion that occurred between successive frames. An object moving quickly appears blurred in the individual still frames. Computer animation has traditionally imaged scenes as individual instants in time and has ignored motion blur. The resulting motion often exhibits temporal aliasing and strobing effects that are disconcerting to the human eye. Motion blur is a complex topic that is beginning to appear in the literature [7, 12].<br>&nbsp; &nbsp;The particles in our wall-of-fire element are motion-blurred. Three-dimensional positions are calculated for a particle at the beginning of a frame and about halfway through the frame, and an antialiased straight line is drawn between the corresponding screen coordinate positions in the frame buffer.$ ^4 $ Antialiased lines are used to prevent staircasing (moving jaggies) and strobing (popping on and off) effects. To be perfectly correct, screen motion due to movement of the camera should be considered when calculating where to blur a particle. One can also argue that simulating the imperfect temporal sampling of a movie camera is not ideal and that motion blur should really simulate what happens in the human eye. This is a good area for future research.<br>&nbsp; &nbsp;In the finished sequence, the wall of fire spread over the surface of the planet both in front of and behind the planet’s limb (outer edge). The rendering algorithm generated two images per frame–one for all particles between the camera’s position and the silhouette plane of the planet, and one for all particles on the other side of this clipping plane. These two elements were composited with the barren moonlike planet element and the stars element in back-to-front order–stars, background fires, planet, and foreground fires.<br>&nbsp; &nbsp;Because the wall of fire was modeled using many small light-emitting particles, light from the fire should have reflected off the planet’s surface. Our current implementation of particle systems does not handle light reflection on surfacebased objects. To achieve this effect, Lucasfilm team member Tom Duff added an additional strong local light source above the center of the rings of fire when he rendered the planet’s surface. This produced the glow that circles the ring of fire on the planet’s surface. This glow is visible in Figure 5.)<br>&nbsp; &nbsp;Figure 4 is a frame showing the initial impact of the Genesis bomb. It was generated from one very large particle system and about 20 smaller ones about its base. About 25,000 particles exist in this image. Figure 5 occurs partway through the first half of the sequence. It contains about 200 particle systems and 75,000 particles. Figure 6 shows the ring of fire extending over and beyond the limb of the planet. It is formed from about 200 explosions and 85,000 particles. Figure 7 shows the wall of fire just before it engulfs the camera; in Figure 8 the camera is completely engulfed. Both employ about 400 particle systems and contain over 750,000 particles. The textures in Figure 8 are completely synthetic and yet have a “natural” and highly detailed appearance that is uncommon in most computer graphics images. These images are interesting statically, but they only really come alive on the movie screen. It is interesting to note that this is also the case for many of the best traditional (i.e., non-computer-generated) special effects shots where motion blur is an important factor.<br>&nbsp; &nbsp;A few points concerning random numbers are of interest from a production point of view. The random number routine we use is based on [6], and generates numbers uniformly in the range [0.0, 1.0]. It is an incremental algorithm based on updating a table of seed values. To checkpoint a production, all that need be saved is this random number table–we do not save all the parameters of 750,000 particles. To restart a computation at frame $ n $ , the closest preceding frame $ p $ is found that cannot contribute particles to frame $ n $ (this is determined from the lifetime parameters of all the active particle sysrtems). Frame $ p $ + 1’s random number table is then read, and particle generation can begin from there. No<br><img src="4.png"><br><font size = 2><center>Fig. 4. Initial explosion.</center></font><br><img src="5.png"><br><font size = 2><center>Fig. 5. Expanding wall of fire.</center></font><br><img src="6.png"><br><font size = 2><center>Fig. 6. Wall of fire over limb of planet.</center></font><br><img src="7.png"><br><font size = 2><center>Fig. 7. Wall of fire about to engulf camera.</center></font><br><img src="8.png"><br><font size = 2><center>Fig. 8. Wall of fire completely engulfing camera.</center></font><br>particles are drawn until the simulation reaches frame $ n $, so this backing up and restarting usually takes only a few minutes.<br>&nbsp; &nbsp;Particles moving off screen or being extinguished for any reason do not affect the randomness of other particles. This is because all stochastic decisions concerning a particle are performed when it is generated. After that, its motion is deterministic. If stochastic elements were to be used to perturbate the dynamics of a particle (e.g., to simulate turbulence), more care would have to be taken when checkpointing a frame and killing particles. In that case, it would probably be better to use a more deterministic and reproducible random number generator.</p><h3 id="4-OTHER-APPLICATIONS-OF-PARTICLE-SYSTEMS"><a href="#4-OTHER-APPLICATIONS-OF-PARTICLE-SYSTEMS" class="headerlink" title="4. OTHER APPLICATIONS OF PARTICLE SYSTEMS"></a>4. OTHER APPLICATIONS OF PARTICLE SYSTEMS</h3><h4 id="4-1-Fireworks"><a href="#4-1-Fireworks" class="headerlink" title="4.1 Fireworks"></a>4.1 Fireworks</h4><p>We are currently using particle systems to model fireworks. The fireworks differ from the Genesis Demo in that the control parameters of the particle systems vary more widely, and streaking is more predominate. Figure 9 shows two red explosions superimposed. One explosion is tall, thin, and near the end of its lifetime, and the other is short, fat, and building up to full steam. Figure 10 shows several green explosions dying off and blue spherical explosion starting up. Figure 11 contains overlapping, multicolored explosions formed with different generation shapes and ejection angles. Again, these images only really come alive when projected at 24 frames per second.<br><img src="9.png"><br><font size = 2><center>Fig. 9. Two red fireworks.</center></font><br><img src="10.png"><br><font size = 2><center>Fig. 10. Green and blue fireworks.</center></font><br><img src="11.png"><br><font size = 2><center>Fig. 11. Multicolored fireworks.</center></font></p><h4 id="4-2-Line-Drawing-Explosions"><a href="#4-2-Line-Drawing-Explosions" class="headerlink" title="4.2 Line Drawing Explosions"></a>4.2 Line Drawing Explosions</h4><p>Particle systems are being used to model exploding objects in a computer simulated tactical display for a scene from the movie <em>Return of the Jedi</em> [8]. In this case, the particle systems are implemented on a line-drawing display. In order to simulate motion blur, the particles are drawn as very small straight lines instead of as points. The texturing effects that are evident in the previous examples are lost on a line-drawing display, and yet the motion still looks real and the sequence gives the viewer the impression that something is exploding. This is because the model is dynamic–it moves well.</p><h4 id="4-3-Grass"><a href="#4-3-Grass" class="headerlink" title="4.3 Grass"></a>4.3 Grass</h4><p>To model grass, we use an explosive type of particle system, similar to that used in the Genesis Effect. Instead of drawing particles as little streaks, the parabolic trajectory of each particle over its entire lifetime is drawn. Thus, the time-domain motion of the particle is used to make a static shape. Grasslike green and dark green colors are assigned to the particles which are shaded on the basis of the scene’s light sources. Each particle becomes a simple representation of a blade of grass and the particle system as a whole becomes a clump of grass. Particle systems randomly placed on a surface and overlapping one another are used to model a bed or patch of grass.<br>&nbsp; &nbsp;Figure 12 is a picture entitled white.sand by Alvy Ray Smith of Lucasfilm. The grass elements of this image were generated as described above. The plant<br><img src="12.png"><br><font size = 2><center>Fig. 12. white.sand.</center></font><br>elements were generated using a partially stochastic technique similar to particle systems.</p><h3 id="5-ONGOING-RESEARCH-IN-PARTICLE-SYSTEMS"><a href="#5-ONGOING-RESEARCH-IN-PARTICLE-SYSTEMS" class="headerlink" title="5. ONGOING RESEARCH IN PARTICLE SYSTEMS"></a>5. ONGOING RESEARCH IN PARTICLE SYSTEMS</h3><p>A logical extension of this research will be to use particle systems to model fuzzy objects in which the individual particles can not be rendered as point light sources, but must be rendered as individual light-reflecting objects.<br>&nbsp; &nbsp;To this end, we have begun to investigate the modeling of clouds. Clouds are difficult for several reasons. First, the shape and form of clouds are complex, depending on many factors such as wind direction, temperature, terrain, and humidity. The atmospheric literature abounds with cloud models that are simple in concept but computationally difficult, since most are based on partial differential equations. Second, clouds are difficult because they can throw shadows on themselves. This property is very important in making a cloud look like a cloud. Third, the number of particles needed to model a cloud will be very large. This will require an efficient rendering algorithm.</p><h3 id="8-CONCLUSIONS"><a href="#8-CONCLUSIONS" class="headerlink" title="8. CONCLUSIONS"></a>8. CONCLUSIONS</h3><p>We have presented particle systems, a method for the modeling of a class of fuzzy objects, and have shown how they were used in making the fire element of the Genesis Demo sequence for the movie <em>Star Trek II: The Wrath of Khan</em>. Particle systems have been used as a modeling tool for other effects and appear promising for the modeling of phenomena like clouds and smoke.<br>&nbsp; &nbsp;Particles, especially when modeled as point light sources or as streaks of light, have proved efficient to render–they are merely antialiased lines. Because they are so simple, they lend themselves to a hardware or firmware implementation. With a hardware antialiased line-drawing routine, the computation of our wall-of-fire element would have been two to three times faster.<br>&nbsp; &nbsp;Particle systems are procedural stochastic representations controlled by several global parameters. Stochastic representations are capable of producing minute detail without requiring substantial user design time. The textures in the fire sequence could not have been modeled with other existing methods. Fire images, scanned in from a photograph or painted, could have been texture mapped, but they would still have been static. Another advantage of a procedural representation is its ability to adapt to several different viewing environments. For example, procedural representations can generate only as much detail as is needed in a frame, potentially saving significant amounts of computation time.<br>&nbsp; &nbsp;Having finally come to grips with spatial aliasing, it is now time for computer image synthesis to being to investigate and solve temporal aliasing problems. The Genesis Demo is the first “big screen” computer-synthesized sequence to include three-dimensional dynamic motion blur. The particles in a particle system can easily be motion-blurred because they are so simple. A great deal of work remains to be done in this area–blurring particles is much easier than blurring curved surface patches.<br>&nbsp; &nbsp;Particle systems can model objects that explode, flow, splatter, puff up, and billow. These kinds of dynamics have not been produced with surface-based representations. The most important aspect of particle systems is that they move: good dynamics are quite often the key to making objects look real.</p><h3 id="7-ACKNOWLEDGMENTS"><a href="#7-ACKNOWLEDGMENTS" class="headerlink" title="7. ACKNOWLEDGMENTS"></a>7. ACKNOWLEDGMENTS</h3><p>The author gratefully acknowledges the suggestions and encouragement of all members of the graphics project at Lucasfilm Ltd, especially those who worked on the Genesis Demo sequence: Loren Carpenter, Ed Catmull, Pat Cole, Rob Cook, David DiFrancesco, Tom Duff, Rob Poor, Tom Porter, and Alvy Ray Smith. The crusade for motion blur and antialiasing in computer image synthesis is a goal of the entire graphics project and Lucasfilm as a whole. One of the referees deserves credit for pointing out several extensions and improvements to the motion blurring discussion. Finally, thanks to Ricki Blau for editorial and photographic assistance.</p><p>REFERENCES<br><font size = 2></p><ol><li>ABRAHAM, R., AND SHAW, C. <em>DYNAMICS–The Geometry of Behavior</em>. City on the Hill Press, Santa Cruz, Calif., 1981. </li><li>BADLER, N. I., O’ROURKE, J., AND TOLTZIS, H. A spherical human body model for visualizing movement. <em>Proc. IEEE 67</em>, 10 (Oct. 1979). </li><li>BLINN, J. F. Light reflection functions for simulation of clouds and dusty surfaces. Proc. SIGGRAPH ‘82. In <em>Comput. Gr. 16, 3</em>, (July 1982), 21-29. </li><li>CsuaI, C., HACKATHORN, R., PARENT, R., CARLSON, W., AND HOWARD, M. Towards an interactive high visual complexity animation system. Proc. SIGGRAPH 79. In <em>Comput. Gr. 13</em>, 2 (Aug. 1979), 289-299. </li><li>FOURNIER, A., FUSSEL, D., AND CARPENTER, L. Computer rendering of stochastic models. <em>Commun. ACM25</em>, 6, (June 1982), 371-384.</li><li>KNUTH, D. E. <em>The Art of Computer Programming</em>, vol. 2. Addison-Wesley. Reading, Mass., (1969), p. 464.</li><li>KOREIN, J., AND BADLER, N. I. Temporal anti-aliasing in computer generated animation. To appear in Proc. SIGGRAPH ‘83 (July 1983).</li><li>LUCASFILM. <em>Return of the Jedi</em> (film), May 1983.</li><li>NORTON, A. Generation and display of geometric fractals in 3-D. Proc. SIGGRAPH ‘82. In <em>Comput. Gr. 16</em>, 3 (July 1982), 61-67.</li><li>PARAMOUNT. <em>Star Trek II: The Wrath of Khan</em> (film), June 1982.</li><li>PBS. <em>Carl Sagan’s Cosmos Series</em>. (television series), Public Broadcasting System, 1980.</li><li>POTMESIL, M., AND CHAKRAVARTY, I. Modeling motion blur in computer-generated images. To appear in Proc. SIGGRAPH ‘83 (July 1983).</li><li>REQUICHA, A. A. G., AND VOELCKER, H. B. Solid modeling: A historical summary and comtemporary assessment. <em>IEEE Comput. Gr. Appl</em>. (March 1982).</li><li>SMITH, A. R., CARPENTER, L., CATMULL, E., COLE, P., COOK, R., POOR, T.,PORTER, T. AND REEVES, W. <em>Genesis Demo Documentary</em> (film), June 1982, Lucasfilm Ltd.</li></ol><hr><p>$ ^1 $ In more detail, average red, green, and blue values are specified.<br>$ ^2 $ Note that this clipping is performed in modeling space–to a given plane for example. Clipping to the viewing frustum occurs later in the rendering stage and is discussed below.<br>$ ^3 $ Explosions and fire, the two fuzzy objects we have worked with the most, are modeled well with this assumption. Other fuzzy objects, such as clouds and water, are not. Section 5 discusses rendering algorithms for these objects.<br>$ ^4 $  A particle’s trajectory is actually parabolic, but the straight-line approximation has so far proved sufficient.<br></font><br></font></p><h1 id="汉译"><a href="#汉译" class="headerlink" title="汉译"></a>汉译</h1><h2 id="粒子系统：一种对一类模糊物体的建模技术"><a href="#粒子系统：一种对一类模糊物体的建模技术" class="headerlink" title="粒子系统：一种对一类模糊物体的建模技术"></a>粒子系统：一种对一类模糊物体的建模技术</h2><h3 id="WILLIAM-T-REEVES-Lucasfilm-Ltd-1"><a href="#WILLIAM-T-REEVES-Lucasfilm-Ltd-1" class="headerlink" title="WILLIAM T. REEVES Lucasfilm Ltd"></a>WILLIAM T. REEVES Lucasfilm Ltd</h3><hr><p>这篇论文介绍了粒子系统——一种对火焰、云彩和水等模糊物体的建模方法。粒子系统将物体建模为定义了体积的原始粒子团。在一段时间内，粒子在系统中生成，在系统中移动和改变形态，并在系统中销毁。这种生成的模型能够表示运动、形态变化和动力学特征，而这些正是经典的基于表面表示方法所不能表现的。粒子很容易运动模糊，因此不会出现时态混叠和残影。粒子系统中的许多粒子是用随机过程来生成和控制的。文章还介绍了粒子系统在电影《星际迷航II：可汗之怒》[10] 的“创世纪演示”镜头序列中火墙的应用。<br>分类和主题描述：I.3.3 [计算机图形学]: 图片/图像生成; I.3.5 [计算机图形学]: 计算几何与物体建模; I.3.7 [计算机图形学]: 三维图形与仿真技术<br>一般术语：算法, 设计<br>附加关键字词：运动模糊, 随机建模, 时态混叠, 动态对象</p><hr><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>事实证明，用现有的计算机图像合成技术很难对云、烟、水和火等现象进行建模。这些“模糊”物体没有平滑、清晰且有光泽的表面；相反，它们的表面是不规则的、复杂且不清晰的。我们关注它们在形状和外观上的动态和流动变化。它们不是刚性物体，也不能用计算机图形学中常见的简单仿射变换来描述它们的运动。<br>&nbsp; &nbsp; &nbsp; &nbsp;本文提出了一种模糊物体的建模方法，我们称之为粒子系统。粒子系统的表示方法与图像合成中通常使用的表示方法在三个基本方面有所不同。首先，物体不是由定义了边界的一组基本曲面元素（如多边形或面片）表示，而是由定义了体积的基本粒子团表示。其次，粒子系统不是静态实体。它的粒子随着时间的推移而改变形态和移动。新的粒子“出生”，旧的粒子“死亡”。最后，由粒子系统表示的对象是不确定的，因为它的形状和形态没有完全确定。相反，一个物体的形状和外观是由随机过程来创建和改变的。<br>&nbsp; &nbsp; &nbsp; &nbsp;在模糊对象建模中，粒子系统比传统的面向曲面技术有几个重要的优点。首先，粒子（现在我们将粒子视为三维空间中的一个点）是比多边形（最简单的曲面表示形式）简单得多的基本图元。因此，在相同的计算时间内，可以处理更多的基本图元并生成更复杂的图像。因为粒子很简单，所以也很容易运动模糊。迄今为止，在计算机图像合成中，为消除时态混叠效应而对快速运动物体进行的运动模糊在很大程度上被人们忽略了。其次，模型定义是程序性的，并由随机数控制。因此，获得一个非常精致的模型并不一定需要大量的人工设计时间，现有的基于表面的系统通常就是这样。因为它是程序性的，粒子系统可以调整其细节级别以适配一组特定的观察参数。与分形曲面[5]一样，缩放在粒子系统中可以显示越来越多的细节。最后，粒子系统为“活着”的物体对象建模，也就是说它们在一段时间内会改变形状。使用基于曲面的建模技术很难表示这种形式的复杂动力学特征。<br>&nbsp; &nbsp; &nbsp; &nbsp;将物体对象建模为粒子集合并不是一个新点子。15年前，最早的电脑游戏用屏幕上布满的许多发光的小点描绘了爆炸的宇宙飞船。在许多三维建模系统（例如早期的Evans和Sutherland飞行模拟器）中，点源被用作图形数据类型——尽管文献中很少有对它们的真正引用。俄亥俄州立大学的Roger Wilson[4]用粒子模拟出了从烟囱中冒出的烟雾。他的模型既没有使用随机控制，也没有动力学内容。Alvy Ray Smith和Jim Blinn在Cosmos系列节目中使用粒子来模拟星系中恒星的产生和死亡[11]。Alan Norton[9]使用粒子生成并显示三维分形形状。Jim Blinn[3]讨论了模拟光线通过粒子层和被粒子层反射的光反射函数。他的技术被用来制作土星光环的图像。Blinn没有解决模糊物体建模问题，而这正是本文的主题。体积表示法也被认为是曲面表示法的可行替代方法。实体建模[13]是体积表示法的一种形式，Norm Badler和Joe O’Rourke在“bubbleman”[2]中的工作也是如此。随机建模的使用将我们的工作与分形建模的最新进展联系起来[5]。<br>&nbsp; &nbsp; &nbsp; &nbsp;第2节更详细地描述了粒子系统的基本框架。第3节探讨了在电影《星际迷航II：可汗之怒》的“创世纪演示”镜头序列中，粒子系统是如何被用来产生火焰的[10]。第4节介绍了粒子系统的几个其他应用，第5节讨论了该领域正在进行的和未来的研究。</p><h3 id="2-粒子系统的基本模型"><a href="#2-粒子系统的基本模型" class="headerlink" title="2.粒子系统的基本模型"></a>2.粒子系统的基本模型</h3><p>粒子系统是许多微小粒子的集合，它们共同代表一个模糊的物体对象。在一段时间内，在系统中生成，在系统中移动和变化，然后在系统中销毁。<br>&nbsp; &nbsp; &nbsp; &nbsp;计算运动序列中的每个帧，需要执行以下步骤：（1）新粒子被生成到系统中，（2）每个新粒子都被指定其各自的属性，（3）系统中存在的超过规定寿命的任何粒子都会被销毁，（4）剩余的粒子将根据其动力学属性进行移动和变换，最后（5）在帧缓冲区中渲染活动粒子的图像。粒子系统可以经过编程，使其在每一步执行任何一组指令。因为它是程序性的，所以这种方法可以结合任何描述物体外观或动力学的计算模型。例如，粒子的运动和变换可以与偏微分方程组的解联系在一起，或者粒子属性可以根据统计力学指定。因此，我们可以利用其他科学或工程学科开发的模型。<br>&nbsp; &nbsp; &nbsp; &nbsp;在这里介绍的研究中，我们使用简单的随机过程作为生成帧的每个步骤的程序性要素。要控制粒子系统中粒子的形状、外观和动力学特征，模型设计者会用到一组参数。随机选择每个粒子的外观和运动的随机过程会受到这些参数的约束。通常，每个参数都用来指定粒子的属性值必须位于的范围。我们通常使用平均值和最大方差来指定这些范围。<br>&nbsp; &nbsp; &nbsp; &nbsp;以下小节更详细地描述了粒子系统的基本模型，以及如何在我们编写的软件中控制和指定它们。</p><h4 id="2-1-粒子生成"><a href="#2-1-粒子生成" class="headerlink" title="2.1 粒子生成"></a>2.1 粒子生成</h4><p>粒子在粒子系统中通过受控随机过程生成。该过程确定在每个时间间隔（即在给定帧）内进入系统的粒子数。生成的粒子数很重要，因为它强烈影响模糊物体对象的密度。<br>&nbsp; &nbsp; &nbsp; &nbsp;模型设计者可以选择以下两种方式来控制新粒子的数量。在第一种方法中，设计者控制在一帧上生成的粒子的平均数量及其方差。在帧$ f $上生成的实际粒子数为<br>$$ NParts_f = MeanParts_f + Rand() \times VarParts_f, $$<br>其中，$ Rand $是一个程序过程，返回一个在-1.0和+1.0之间均匀分布的随机数，$ MeanParts_f $是粒子的平均数，$ VarParts_f $是其方差。<br>&nbsp; &nbsp; &nbsp; &nbsp;在第二种方法中，新粒子的数量取决于物体对象的屏幕画面大小。模型设计者控制每单位屏幕面积生成的粒子平均数及其方差。程序化粒子系统可以确定特定帧的视图参数，计算其覆盖的大致屏幕区域，并相应地设置新粒子的数量。相应的方程为<br>$$ NParts_f = (MeanParts_{sa_f} + Rand() \times VarParts_{sa_f}) \times ScreenArea, $$<br>其中，$MeanParts_{sa}$是每单位屏幕面积粒子数的平均值，$VarParts_{sa_f}$是其方差，$ScreenArea$是粒子系统的屏幕面积。这个方法控制粒子系统的细节级别，从而控制渲染其图像所需的时间。例如，我们没必要在屏幕上占用4个像素的物体对象中生成100000个粒子。<br>&nbsp; &nbsp; &nbsp; &nbsp;为了使粒子系统在强度上增长或收缩，设计者可以随时间去改变每帧生成的粒子的平均数量（即，$MeanParts_f$和$MeanParts_{sa_f}$是如上所述的帧数函数）。目前，我们使用一个简单的线性函数<br>$$ MeanParts_f = InitialMeanParts + DeltaMeanParts \times (f - f_0) $$<br>或者<br>$$ MeanParts_{sa_f} = InitialMeanParts_{sa} + DeltaMeanParts_{sa} \times (f - f_0), $$<br>其中，$f$是当前帧，$f_0$是粒子系统处于活动状态的第一帧，$InitialMeans$表示该第一帧的粒子平均数，$VarParts_{sa_f}$表示其变化率。方差约束量$VarParts_f$和$VarParts_{sa_f}$目前在所有帧上都是恒定的。更复杂的二次型，<br>三次型，甚至随机变化在均值和方差参数中都很容易添加。<br>&nbsp; &nbsp; &nbsp; &nbsp;因此，为了控制粒子系统的粒子生成，设计者指定$f_0$和参数$InitialMeanParts$、$DeltaMeanParts$和$VarParts$，或参数$InitialMeanParts_{sa}$、$DeltaMeanParts_{sa}$和$VarParts_{sa}$。</p><h4 id="2-2-粒子属性"><a href="#2-2-粒子属性" class="headerlink" title="2.2 粒子属性"></a>2.2 粒子属性</h4><p>对于生成的每个新粒子，粒子系统必须确定以下属性的值：<br>（1） 初始位置，<br>（2） 初始速度（速率和方向），<br>（3） 初始大小，<br>（4） 初始颜色，<br>（5） 初始透明度，<br>（6） 形状，<br>（7） 粒子寿命。<br>粒子系统的几个参数控制着粒子的初始位置。粒子系统在三维空间中有一个定义其原点的位置。通过原点绕坐标系旋转的两个角度得出其方向。粒子系统也有一个生成形状，该形状定义了一个关于其原点的区域，新生粒子随机放置在该区域中。我们实现的生成形状包括：半径为$r$的球体、以$x-y$平面作为其坐标系的半径为$r$的圆，以及以$x-y$平面作为其坐标系的长度为$l$、宽度为$w$的矩形。图1展示了球形生成形状的典型粒子系统。基于自然规律或混沌吸引子[1]的更复杂的生成形状已经被设想出来，但尚未实现。<br><img src="13.png"><br><font size = 2><center>图1. 具有球形生成形状的典型粒子系统</center></font><br>&nbsp; &nbsp; &nbsp; &nbsp;粒子系统的生成形状还描述了新粒子移动的初始方向。在球形生成形状中，粒子从粒子系统的原点向外移动。在圆形或矩形形状中，粒子从$x-y$平面向上移动，但允许根据另一个参数——“放射”角度——改变垂直方向（见图3）。粒子的初始速度由<br>$$ InitialSpeed = MeanSpeed + Rand() \times VarSpeed, $$<br>所决定，其中，$MeanSpeed$和$VarSpeed$是粒子系统的另外两个参数，即平均速度及其方差。<br>&nbsp; &nbsp; &nbsp; &nbsp;要确定粒子的初始颜色，粒子系统需要获得平均颜色$^1$以及与该颜色的最大偏差。粒子透明度和粒子大小也由平均值和最大变化范围决定。这些方程与上面给出的初速度方程相似。<br>&nbsp; &nbsp; &nbsp; &nbsp;粒子系统有一个参数，用于指定它生成的每个粒子的形状。目前已实现的粒子形状有球形、矩形和条纹球形。后者用于运动模糊化粒子——这是为快速移动的物体对象建模时的一个非常重要的特性。我们将在第2.5节和第3节中详细讨论条纹粒子。<br>&nbsp; &nbsp; &nbsp; &nbsp;可能的属性控制参数及其变体的数量是无穷无尽的。我们正在展示我们发现最有用和最有趣的东西。</p><h4 id="2-3-粒子动力学"><a href="#2-3-粒子动力学" class="headerlink" title="2.3 粒子动力学"></a>2.3 粒子动力学</h4><p>粒子系统中的单个粒子在三维空间中移动，并且颜色、透明度和大小也会随时间而变化。<br>&nbsp; &nbsp; &nbsp; &nbsp;要将粒子从一帧移动到下一帧，只需将其速度向量加到位置向量即可。为了增加复杂性，粒子系统还使用加速度在帧与帧之间修改粒子的速度。使用这个参数，模型设计者可以模拟重力，并使粒子以抛物线而不是直线移动。<br>&nbsp; &nbsp; &nbsp; &nbsp;粒子的颜色随时间变化是由“颜色变化率”参数所规定的。粒子的透明度和大小以完全相同的方式控制。在我们的实现中，这些变化率对于粒子系统中的所有粒子来说都是全局的，但是我们也可以很容易地想到将这个参数变成随机的。</p><h4 id="2-4-粒子销毁"><a href="#2-4-粒子销毁" class="headerlink" title="2.4 粒子销毁"></a>2.4 粒子销毁</h4><p>生成粒子时，粒子的寿命以帧为单位。随着每一帧的计算，粒子的寿命将逐渐减少。当粒子的寿命为零时，它就会被销毁。<br>&nbsp; &nbsp; &nbsp; &nbsp;只要粒子对图像没有任何贡献，那么其他机制也可以用来规划粒子的销毁。如果根据颜色和透明度计算的粒子强度低于指定阈值，则该粒子将被销毁。从其父粒子系统原点沿指定方向移动超过指定距离的粒子也可能被销毁。这种机制可以用来去除在关注区域之外的粒子。$ ^2 $</p><h4 id="2-5-粒子渲染"><a href="#2-5-粒子渲染" class="headerlink" title="2.5 粒子渲染"></a>2.5 粒子渲染</h4><p>一旦为一帧计算了所有粒子的位置和外观参数，渲染算法就会生成一张图片。一般的粒子渲染问题与由更常见的图元（如多边形和曲面）组成的物体对象的渲染一样复杂。粒子可以在屏幕深度上遮挡其后面的其他粒子。它们可以是透明的，并且可以在其他粒子上投射阴影。此外，粒子可以与基于曲面的基本体建模的物体对象共存于场景中，并且这些物体对象可以与粒子相交。<br>&nbsp; &nbsp; &nbsp; &nbsp;在我们现有的系统中，两个假设允许我们去简化渲染算法。首先，我们假设粒子系统不与其他基于曲面的建模基本体相交，因此我们的渲染算法只需要处理粒子。使用其他技术建模的对象将在渲染后的合成阶段与粒子系统对象合成在一起。为了使粒子系统相交或位于其他物体对象后面，渲染系统将基于在模型坐标空间中定义的剪裁平面将粒子系统的图像分割为子图像，然后在合成阶段将这些子图像与其他图像组合。<br>&nbsp; &nbsp; &nbsp; &nbsp;在我们当前的渲染系统中，另一个简化的假设是每个粒子都可以作为点光源。有了这个假设，隐藏曲面的确定不再是一个问题。每个粒子都会为其占有的像素添加一点光强。一个粒子后面的另一个粒子不会被遮挡，而是会为覆盖的像素添加更多光强。添加的光强及其颜色取决于粒子的透明度和颜色。目前，添加的光强并不取决于粒子和观察位置之间的距离，但这是一个简单的扩展。观察变换、粒子大小及其形状决定了覆盖哪些像素。所有粒子形状都被绘制为抗锯齿，以防止时态混叠和残影。光线可能会被许多粒子添加到像素中，因此渲染算法会将单个的红色、绿色和蓝色强度钳制在帧缓冲区的最大强度值处，而不是让它们任意扩超。<br>&nbsp; &nbsp; &nbsp; &nbsp;使用这种算法和假设，我们不需要对粒子进行排序。它们以任意生成顺序渲染到帧缓冲区。阴影生成不再是一个难题，因为粒子不反射光而是发光。</p><h4 id="2-6-粒子层级"><a href="#2-6-粒子层级" class="headerlink" title="2.6 粒子层级"></a>2.6 粒子层级</h4><p>我们的系统有一个支持粒子系统层次结构的形成和控制的机制。模型设计者创建一个粒子系统，其中粒子本身就是粒子系统。当父粒子系统发生变换时，其所有子粒子系统及其粒子也会发生变换。父粒子系统的平均颜色及其方差用于使用前面介绍的相同方程式选择子粒子系统的平均颜色和方差。一帧中生成的新粒子系统的数量基于父粒子的粒子生成速率。父对象的其他参数同样会影响其子对象的参数。用于表示层次结构的数据结构是树。<br>&nbsp; &nbsp; &nbsp; &nbsp;层次结构可以用于对由多个粒子系统组成的复杂模糊物体对象进行全局控制。例如，一朵云可能由许多粒子系统组成，每个粒子系统表示一个水粒子的翻滚区域。父粒子系统可以将这些粒子组合在一起，并控制受风和地形影响的云的全局运动和外观。</p><h3 id="3-使用粒子系统为一面火墙和爆炸效果建模"><a href="#3-使用粒子系统为一面火墙和爆炸效果建模" class="headerlink" title="3. 使用粒子系统为一面火墙和爆炸效果建模"></a>3. 使用粒子系统为一面火墙和爆炸效果建模</h3><p>电影《星际迷航II：可汗之怒》[10]中的“创世纪演示”镜头序列[14]由卢卡斯电影有限公司的计算机图形项目生成。这一镜头序列描绘了一个名为“创世纪炸弹”的实验装置将一颗死亡的、类似月球表面的行星转变为一颗温暖的、类似地球表面的行星。在一次计算机模拟演示中，炸弹击中了行星表面，一道不断扩大的火墙从撞击点向外蔓延，最终“清洗”了整个行星。行星表面开始弯曲，山脉生长，海洋、植被和大气形成了一个类似地球的环境。<br>&nbsp; &nbsp; &nbsp; &nbsp;“创世纪演示”中的火墙是使用粒子系统的两级层次结构生成的。顶层粒子系统集中在“创世纪炸弹”的撞击点。它产生的粒子本身就是粒子系统。图2展示了这些次级粒子系统的位置，以及它们如何在行星表面形成不断膨胀的同心环。<br><img src="14.png"><br><font size = 2><center>图2. 行星表面粒子系统的分布</center></font><br>每个环中生成的新粒子系统的数量基于环的周长和一个密度控制参数。新的粒子系统在环周围随机分布。在相同或相邻的环中重叠的粒子系统让环表现出坚实、连续的外观。<br>&nbsp; &nbsp; &nbsp; &nbsp;次级粒子系统根据它们与撞击点的距离，在不同的时间开始产生粒子。通过改变粒子系统的起始时间，产生了膨胀的火墙效果。<br>&nbsp; &nbsp; &nbsp; &nbsp;次级粒子系统被模拟成爆炸的形态。图3展示了一个示例。生成的形状是行星表面的一个环。在环内任意位置产生的粒子向上飞离行星表面，这同时也是所有粒子系统的方向。粒子运动的初始方向受到系统放射角的限制，落在图3所示的倒锥体所限定的区域内。当粒子向上飞行时，重力参数将它们拉回到行星表面，给它们一条抛物线运动路径。每帧生成的粒子数基于粒子系统覆盖的屏幕面积。<br>&nbsp; &nbsp; &nbsp; &nbsp;每个粒子系统并不完全相同。它们的平均颜色和颜色变化率是从父粒子系统继承的，但会随机变化。初始平均速度、生成圆半径、放射角、平均粒子大小、平均寿命、平均粒子生成率和平均粒子透明度参数也基于其父<br><img src="15.png"><br><font size = 2><center>图3. 爆炸状粒子系统的形式</center></font><br>参数，但也会随机变化。改变平均速度参数会导致爆炸的高度不同。<br>&nbsp; &nbsp; &nbsp; &nbsp;次级粒子系统产生的所有粒子主要是红色，带有一丝绿色。回想一下第2.5节，粒子被视为点光源，颜色被添加到像素中，而不是无光。当许多粒子覆盖一个像素时，就像每次爆炸的中心和底部附近的情况一样，红色分量迅速增加到最大强度并被钳制，绿色分量增加到最终像素颜色为橙色甚至黄色。因此，爆炸的中心有一道炽热的黄橙色光芒，在其他地方褪为红色。事实上，一个小的蓝色分量会导致被很多粒子覆盖的像素看起来是白色的。粒子颜色变化的速率可以模拟某个假设材料热发光部分的冷却。绿色和蓝色分量很快就消失了，而红色分量则以较慢的速度消失。当粒子的寿命耗尽、强度低于最小强度参数或恰好落在行星表面以下时，粒子就被销毁。<br>&nbsp; &nbsp; &nbsp; &nbsp;快速移动的物体会在人眼视网膜上留下模糊的图像。当使用电影摄影机以每秒24帧的速度拍摄实景时，摄影机快门通常会保持打开状态1/50秒。在一帧上捕获的图像实际上是连续帧之间发生的大约一半运动的混合。快速移动的物体对象在单独的静止帧中表现出模糊效果。传统上，计算机动画将场景成像为时间上的单个瞬间，并忽略了运动模糊。由此产生的运动通常表现出时态混叠和残影效果，这让人眼感到不真实。运动模糊是一个复杂的话题，并已经开始出现在文献[7,12]中。<br>&nbsp; &nbsp; &nbsp; &nbsp;火墙中的粒子是运动模糊的。粒子的三维位置是在帧开始处和帧中间计算的，抗锯齿直线是在帧缓冲区中相应的屏幕坐标位置之间绘制的。$ ^4 $抗锯齿直线用于防止阶梯效应（移动锯齿）和残影（突然出现和消失）效果。为了确保完全正确，在计算模糊粒子的位置时，应该考虑由于摄像机移动而导致的屏幕运动。但我们还可以认为模拟电影摄影机不完美的时间采样其实是并不理想的，因为运动模糊应该真正模拟人眼中发生的事情。这是未来一个很好的研究领域。<br>&nbsp; &nbsp; &nbsp; &nbsp;在完成的镜头序列中，火墙在行星边缘（外边缘）的前方和后方蔓延到行星表面。渲染算法每帧生成两幅图像——一幅用于摄像机位置和行星轮廓平面之间的所有粒子，另一幅用于该剪裁平面另一侧的所有粒子。这两种元素是由如同月球般贫瘠的行星元素和恒星元素按从后到前的顺序组合而成的——恒星、背景火焰、行星和前景火焰。<br>&nbsp; &nbsp; &nbsp; &nbsp;因为火墙是用许多发光的小粒子模拟的，所以火发出的光应该从行星表面反射出来。我们目前对粒子系统的实现不处理基于表面的物体对象上的光反射。为了达到这种效果，卢卡斯电影团队成员Tom Duff在渲染行星表面时，在火环中心上方添加了一个额外的强局部光源。这产生了环绕行星表面火环的辉光。（在图5中可以看到这种辉光。）<br>&nbsp; &nbsp; &nbsp; &nbsp;图4是展示“创世纪炸弹”初始撞击的一帧图像。它是由一个非常大的粒子系统和大约20个较小的粒子系统产生的。这张图片中大约有25000个粒子。图5出现在镜头序列的前半部分。它包含大约200个粒子系统和75000个粒子。图6展示了延伸到行星边缘的火环。它由大约200次爆炸和85000个粒子组成。图7展示了火焰吞噬摄像机前的火墙；在图8中，摄像机被完全吞没。两者都采用了大约400个粒子系统，包含超过75万个粒子。图8中的纹理是完全合成的，但具有“自然”和非常细致的外观，这在大多数计算机图形图像中并不常见。这些图像在静态上很有趣，但它们只有在电影屏幕上才能真正生动起来。有趣的是，对于许多最好的传统（即非计算机生成的）特效镜头，运动模糊也是一个重要因素。<br>&nbsp; &nbsp; &nbsp; &nbsp;从生产的角度来看，关于随机数的几个点很有趣。我们使用的随机数例程基于[6]，并在[0.0,1.0]范围内统一生成数字。这是一种基于更新种子值表的增量算法。在存档生产数据时，只需要保存这个随机数表——我们不保存750000个粒子的所有参数。要在帧$n$处重新开始计算，我们会发现最接近的前一帧$p$无法为帧$n$贡献粒子（这是由所有活动粒子系统的寿命参数所确定）。读取帧$p$+1的随机数表，粒子生成则可以从那里开始。<br><img src="4.png"><br><font size = 2><center>图4. 初始爆炸</center></font><br><img src="5.png"><br><font size = 2><center>图5. 膨胀的火墙</center></font><br><img src="6.png"><br><font size = 2><center>图6. 行星边缘的火墙</center></font><br><img src="7.png"><br><font size = 2><center>图7. 即将吞没摄像机的火墙</center></font><br><img src="8.png"><br><font size = 2><center>图8. 完全吞没摄像机的火墙</center></font><br>在模拟到达第$n$帧之前，不会绘制任何粒子，因此备份和重新开始通常只需几分钟。<br>&nbsp; &nbsp; &nbsp; &nbsp;粒子离开屏幕或因任何原因被销毁不会影响其他粒子的随机性。这是因为所有关于粒子的随机决策都是在粒子生成时执行的。在那之后，它的运动是确定的。如果要使用随机因素扰动粒子的动力学特征（例如，模拟湍流），则在存档每一帧和销毁粒子时必须更加小心。在这种情况下，最好使用更具确定性和可复制性的随机数生成器。</p><h3 id="4-粒子系统的其他应用"><a href="#4-粒子系统的其他应用" class="headerlink" title="4. 粒子系统的其他应用"></a>4. 粒子系统的其他应用</h3><h4 id="4-1-烟花"><a href="#4-1-烟花" class="headerlink" title="4.1 烟花"></a>4.1 烟花</h4><p>我们目前正在使用粒子系统来模拟烟花。烟花与“创世纪演示”的不同之处在于粒子系统的控制参数变化更大，条纹更占主导地位。图9展示了两个叠加的红色爆炸。一次爆炸高耸且稀疏，接近其寿命终点，另一次爆炸又矮小且饱满，并且正在形成完全的蒸汽。图10展示了几个绿色爆炸的消逝，蓝色球形爆炸的开始。图11包含了不同生成形状和放射角形成的重叠多彩爆炸。同样，这些图像只有在以每秒24帧的速度投影时才会真正生动表现出来。<br><img src="9.png"><br><font size = 2><center>图9. 两个红色烟花</center></font><br><img src="10.png"><br><font size = 2><center>图10. 绿色和蓝色烟花</center></font><br><img src="11.png"><br><font size = 2><center>图11. 混合色烟花</center></font></p><h4 id="4-2-线条爆炸"><a href="#4-2-线条爆炸" class="headerlink" title="4.2 线条爆炸"></a>4.2 线条爆炸</h4><p>粒子系统被用于在计算机模拟的战术显像中模拟爆炸物体，以拍摄电影《绝地归来》[8]中的一个场景。在这种情况下，粒子系统在线条显像上实现。为了模拟运动模糊，粒子被绘制为非常小的直线，而不是点。在前面的例子中明显的纹理效果在一个线条显像上却消失了，但运动看起来仍然是真实的，这些镜头序列给观众的印象是有东西在爆炸。这是因为模型是动态的——它运动得十分恰当。</p><h4 id="草"><a href="#草" class="headerlink" title="草"></a>草</h4><p>为了模拟草，我们使用了一种爆炸性的粒子系统，类似于“创世纪演示”效果中使用的粒子系统。我们不是将粒子绘制为小条纹，而是绘制每个粒子在其整个寿命内的抛物线轨迹。因此，粒子的时域运动用于生成静态形状。类草绿色和深绿色被指定给基于场景光源进行着色的粒子。每个粒子都成为一片草叶的简单表示，粒子系统作为一个整体而成为一团草。粒子系统随机放置在一个表面上，彼此重叠，用于模拟一个草床或一小块草。<br>&nbsp; &nbsp; &nbsp; &nbsp;图12是一幅名为《白·沙》的图片，由卢卡斯电影公司的Alvy Ray Smith创作。该图像的草如上所述生成。<br><img src="12.png"><br><font size = 2><center>图12. 《白·沙》</center></font><br>图中的植物是使用类似于粒子系统的部分随机技术生成的。</p><h3 id="5-正在进行的粒子系统研究"><a href="#5-正在进行的粒子系统研究" class="headerlink" title="5. 正在进行的粒子系统研究"></a>5. 正在进行的粒子系统研究</h3><p>这项研究的一个逻辑扩展将是使用粒子系统对模糊物体对象建模，其中单个粒子不能渲染为点光源，但必须渲染为单个光反射对象。<br>&nbsp; &nbsp; &nbsp; &nbsp;为此，我们已经开始研究云的建模。云之所以难以模拟，有几个原因。首先，云的形状和形态是复杂的，取决于许多因素，如风向、温度、地形和湿度。气象学文献中有大量概念简单但计算困难的云模型，因为大多数模型都基于偏微分方程。其次，模拟云是困难的，因为它们可以在自己身上投下阴影。这个属性在使云看起来像云时非常重要。最后，为云建模所需的粒子数量将非常大。这需要一个高效的渲染算法。</p><h3 id="8-结论"><a href="#8-结论" class="headerlink" title="8. 结论"></a>8. 结论</h3><p>我们介绍了粒子系统，这是一种对一类模糊物体对象建模的方法，并展示了它们如何用于制作电影《星际迷航II：可汗之怒》的“创世纪演示”镜头序列中的火墙。粒子系统已被用作其他效果的建模工具，并有望用于云和烟等现象的建模。<br>&nbsp; &nbsp; &nbsp; &nbsp;粒子，尤其是当建模为点光源或光条纹时，已被证明能够有效地进行渲染——虽然它们纯粹是抗锯齿线。正因为它们非常简单，所以适合于用硬件或固件实现。使用硬件抗锯齿线绘制例程，我们的火墙模拟的计算速度将提高两到三倍。<br>&nbsp; &nbsp; &nbsp; &nbsp;粒子系统由几个全局参数控制的程序随机表示。随机表示能够在不需要大量用户设计时间的情况下产生微小的细节。火焰镜头序列中的纹理无法用其他现有方法建模。从照片中扫描或绘制的火焰图像可以是纹理贴图，但它们仍然是静态的。程序表示法的另一个优点是它能够适应几种不同的观察环境。例如，程序表示可以只生成帧中所需的细节，这会节省大量的计算时间。<br>&nbsp; &nbsp; &nbsp; &nbsp;在最终掌握了空间混叠之后，现在是计算机图像合成研究和解决时态混叠问题的时候了。“创世纪演示”是第一个包含三维动态运动模糊的“大屏幕”计算机合成镜头序列。粒子系统中的粒子很容易被运动模糊，因为它们非常简单。在这方面还有很多工作要做——模糊粒子比模糊曲面面片容易得多。<br>&nbsp; &nbsp; &nbsp; &nbsp;粒子系统可以为爆炸、流动、飞溅、膨胀和翻滚的物体对象建模。这些类型的动力学特征并不是用基于表面的表示方法产生的。粒子系统最重要的方面是它们的运动：良好的动力学特征通常是使物体看起来真实的关键。</p><h3 id="7-鸣谢"><a href="#7-鸣谢" class="headerlink" title="7.鸣谢"></a>7.鸣谢</h3><p>作者衷心感谢卢卡斯电影有限公司图形项目所有成员的建议和鼓励，尤其是那些参与“创世纪演示”的成员：Loren Carpenter, Ed Catmull, Pat Cole, Rob Cook, David DiFrancesco, Tom Duff, Rob Poor, Tom Porter, 以及 Alvy Ray Smith。计算机图像合成中的运动模糊和抗锯齿是整个图形项目和卢卡斯电影的目标。其中一位审阅人指出了对运动模糊讨论的几个扩展和改进，作者对此表示十分欢迎。最后，感谢Ricki Blau的编辑和摄影帮助。</p><p>参考文献<br><font size = 2></p><ol><li>ABRAHAM, R., AND SHAW, C. <em>DYNAMICS–The Geometry of Behavior</em>. City on the Hill Press, Santa Cruz, Calif., 1981. </li><li>BADLER, N. I., O’ROURKE, J., AND TOLTZIS, H. A spherical human body model for visualizing movement. <em>Proc. IEEE 67</em>, 10 (Oct. 1979). </li><li>BLINN, J. F. Light reflection functions for simulation of clouds and dusty surfaces. Proc. SIGGRAPH ‘82. In <em>Comput. Gr. 16, 3</em>, (July 1982), 21-29. </li><li>CsuaI, C., HACKATHORN, R., PARENT, R., CARLSON, W., AND HOWARD, M. Towards an interactive high visual complexity animation system. Proc. SIGGRAPH 79. In <em>Comput. Gr. 13</em>, 2 (Aug. 1979), 289-299. </li><li>FOURNIER, A., FUSSEL, D., AND CARPENTER, L. Computer rendering of stochastic models. <em>Commun. ACM25</em>, 6, (June 1982), 371-384.</li><li>KNUTH, D. E. <em>The Art of Computer Programming</em>, vol. 2. Addison-Wesley. Reading, Mass., (1969), p. 464.</li><li>KOREIN, J., AND BADLER, N. I. Temporal anti-aliasing in computer generated animation. To appear in Proc. SIGGRAPH ‘83 (July 1983).</li><li>LUCASFILM. <em>Return of the Jedi</em> (film), May 1983.</li><li>NORTON, A. Generation and display of geometric fractals in 3-D. Proc. SIGGRAPH ‘82. In <em>Comput. Gr. 16</em>, 3 (July 1982), 61-67.</li><li>PARAMOUNT. <em>Star Trek II: The Wrath of Khan</em> (film), June 1982.</li><li>PBS. <em>Carl Sagan’s Cosmos Series</em>. (television series), Public Broadcasting System, 1980.</li><li>POTMESIL, M., AND CHAKRAVARTY, I. Modeling motion blur in computer-generated images. To appear in Proc. SIGGRAPH ‘83 (July 1983).</li><li>REQUICHA, A. A. G., AND VOELCKER, H. B. Solid modeling: A historical summary and comtemporary assessment. <em>IEEE Comput. Gr. Appl</em>. (March 1982).</li><li>SMITH, A. R., CARPENTER, L., CATMULL, E., COLE, P., COOK, R., POOR, T.,PORTER, T. AND REEVES, W. <em>Genesis Demo Documentary</em> (film), June 1982, Lucasfilm Ltd.</li></ol><hr><p>$ ^1 $ 更详细地说，这里指定了红色、绿色和蓝色的平均值。<br>$ ^2 $ 请注意，此剪裁是在建模空间中执行的，例如在给定平面上。剪切到视锥体的操作将在渲染阶段的后期进行，将在下面进行讨论。<br>$ ^3 $ 爆炸和火焰，这两个我们处理得最多的模糊物体，在这个假设下得到了很好的建模。其他模糊对象，如云和水，则不是。第5节讨论了这些对象的渲染算法。<br>$ ^4 $  粒子的轨迹实际上是抛物线的，但到目前为止，直线近似已被证明是足够的。<br></font></p>]]></content>
    
    
    <summary type="html">Reeves在1983年文章《Particle Systems A Technique for Modeling a Class of Fuzzy Objects》</summary>
    
    
    
    
    <category term="图形学" scheme="https://www.tevinson997.space/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>The Way Home：从《迈阿密热线》两部曲浅谈美式虚无主义</title>
    <link href="https://www.tevinson997.space/2021/07/16/The%20Way%20Home%EF%BC%9A%E4%BB%8E%E3%80%8A%E8%BF%88%E9%98%BF%E5%AF%86%E7%83%AD%E7%BA%BF%E3%80%8B%E4%B8%A4%E9%83%A8%E6%9B%B2%E6%B5%85%E8%B0%88%E7%BE%8E%E5%BC%8F%E8%99%9A%E6%97%A0%E4%B8%BB%E4%B9%89/"/>
    <id>https://www.tevinson997.space/2021/07/16/The%20Way%20Home%EF%BC%9A%E4%BB%8E%E3%80%8A%E8%BF%88%E9%98%BF%E5%AF%86%E7%83%AD%E7%BA%BF%E3%80%8B%E4%B8%A4%E9%83%A8%E6%9B%B2%E6%B5%85%E8%B0%88%E7%BE%8E%E5%BC%8F%E8%99%9A%E6%97%A0%E4%B8%BB%E4%B9%89/</id>
    <published>2021-07-15T16:00:00.000Z</published>
    <updated>2021-07-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>说到像素艺术，可能大部分人的印象停留在FC红白机时代。受限于8位机的性能限制，非常有限的简单色彩像素点阵表示2D图形成为了像素艺术的名片。随着计算机性能的飞跃和计算机图形学的拓展，从8位机到16位机，再到现在普及的64位机，游戏世界的图形越来越逼真，甚至有时能够以假乱真。你也很难看到现在有游戏公司特地去开发一款像素风格的游戏了。<br>不过你在几年前或许玩过一款叫作《挺进地牢（Enter The Gungeon）》的优秀平面射击像素风游戏，或者是玩过姊妹篇《逃出地牢（Exit The Gungeon）》。虽然已经不是像素的年代，但这两部作品不管是在游戏性还是声画表现上都足以称得上是像素艺术的典范。这两款游戏由Devolver Digital发行。也许对于大家来说，这个名字或许有些陌生。但在业界，Devolver Digital可以说是优秀小品游戏第一线制作公司，旗下的像素游戏精品不断。当然Devolver Digital并不只发行像素游戏，也许你觉得很好玩的一款小品就是Devolver Digital发行的。<br><img src="Devolver_Digital-Logo.wine.png"><br>Devolver Digital于2012年10月23日在美国发行了《迈阿密热线（Hotline Miami）》——也就是今天我们的主角。这款游戏和它的续作《迈阿密热线2：空号（Hotline Miami 2: Wrong Number）》成为了Devolver Digital在公司成立早期的金字招牌——限制级像素风格游戏。凭借着独特的限制级像素风格，独特的电子合成音乐，再搭配上“离奇”的游戏剧情，《迈阿密热线》两部曲在游戏外史中可算是占有一席之地。不过今天我们讨论的不是游戏本身，而是两部曲中游戏剧情所映射的美式虚无主义思想。</p><h2 id="剧情梳理"><a href="#剧情梳理" class="headerlink" title="剧情梳理"></a>剧情梳理</h2><p>如果你只玩过两部曲中的第一代，那么对剧情不知所云是十分正常的。一代中谜语重重，交代甚少，很难让人明白到底发生了什么，只能凭借本能去控制带着鸡头面具的主角闯入一栋又一栋展开屠杀。其实游戏的大部分剧情是在二代补完的，但基于二代采用回转磁带式的时间线叙事，如果不认真理清思路，恐怕玩家也很难玩明白，迷失在混乱的时间线和复杂的人物线中。<br>以下是我自己结合论坛里一些玩家的结论总结和推断出来的大致剧情，如有错误，烦请谅解。</p><h4 id="游戏中的世界观"><a href="#游戏中的世界观" class="headerlink" title="游戏中的世界观"></a>游戏中的世界观</h4><p>1986年4月3日，美苏第一次战争（夏威夷战争）以苏联在美国本土旧金山进行核战术打击而告终。双方签订条约，战争结束。<br>在第二次世界大战中，首先拥有核武器的苏联人迅速封锁了核技术。在冷战开启后，苏联凭借着雄厚的工业基础和强大的国家意志占据了绝对优势。而此时的美国国内爆发了民粹主义思想，阶级仇视和民族仇视十分尖锐。在内外交困的情况下，虚弱的美国政府被迫抵抗苏联人在夏威夷发起的战争攻势。</p><h4 id="鬼狼小队与50BLESsings"><a href="#鬼狼小队与50BLESsings" class="headerlink" title="鬼狼小队与50BLESsings"></a>鬼狼小队与50BLESsings</h4><p>在劣势难以挽回之际，特别行动小队——鬼狼小队在上校的领导下对苏军在夏威夷的军事基地发动了最后的破坏式袭击。上校对政府的软弱无能怀恨在心，于是在本土多个城市内成立了组织50BLESsings。副官，夹克男理查德（Richard），黑人小哥和蒙面胖子是鬼狼小队的成员。</p><p><img src="11.png"></p><center><font size=1>黑人小哥</font></center><p><img src="13.png"></p><center><font size=1>蒙面胖子</font></center>在执行任务前，副官和理查德遇见了前来采访的作家埃文。作家为两位拍下照片，埋下伏笔。某次任务中，独自行动落入敌手的理查德被副官救出，副官把两人的照片塞给理查德并告诉他：“别忘了是谁救你的。”<p><img src="12.png"></p><center><font size=1>副官</font></center>任务结束后，小队成员被接送回国。副官回到旧金山开了一家便利店，而理查德回到了迈阿密。1986年4月3日，理查德正与挚友副官通话，此时收音机里传来灾难播报，理查德耳边的电话也立刻静默无息。理查德的心智开始崩坏，心中对于苏联人的仇恨也随之增加。在得知50BLESsings组织后，理查德决定戴上鸡头面具为组织工作——屠杀迈阿密这座城市中与苏联人有关的一切。<p><img src="15.png"></p><center><font size=1>上校</font></center><h4 id="猪头面具男-马丁·布朗"><a href="#猪头面具男-马丁·布朗" class="headerlink" title="猪头面具男 马丁·布朗"></a>猪头面具男 马丁·布朗</h4><p><img src="6.png"><br>在国内反苏情绪高涨之际，有人以近期火爆头条的屠杀苏联人的鸡头男为原型拍摄了电影，猪头男担任主角。然而妖魔化的民族情绪和藏匿在本能中的杀戮欲望让他迟迟陷入自己的剧本中，他并没有意识到自己正闯入一栋又一栋公寓里进行屠杀。最终当子弹射入脑袋那一刻，他才发现眼前的灯光、摄像机和群众演员都已不存在，所有的一切都是他臆想出来的。</p><h4 id="鼠头面具男-里克特"><a href="#鼠头面具男-里克特" class="headerlink" title="鼠头面具男 里克特"></a>鼠头面具男 里克特</h4><p>里克特某天接到了一个奇怪的电话，电话那头要求他去血洗某所公寓，他并没有当一回事。但第二天他发现自己的车被人烧了，他才意识到事情的严重性。于是他也开始为这个奇怪的电话背后的组织——50BLESsings工作，否则他和他唯一的亲人——他的母亲将会有生命危险。<br>此时的鸡头男理查德已经是名人了，在一次袭击中他顺手救出一个女性并安置在自己家里。两人感情日益升温，被仇恨蒙蔽双眼的理查德开始看到曙光。然而50BLESsings得知此事后，担心理查德会因为此事而失去了对苏联人的仇恨，不再为组织工作。于是他们派遣鼠头男刺杀理查德的女友，不料正好撞见回来的理查德。鼠头男一枪击晕了理查德，逃跑了。<br><img src="17.png"><br>理查德在医院中醒来，由于他与数不胜数的屠杀案有着关系，被警察看守着。理查德想尽办法逃出了医院，找到了鼠头男并把他掐死了。理查德决定要斩草除根，随即袭击警署，找到资料得知了迈阿密最大的苏联帮派地址，于是独自前往，最后在阳台上枪杀了帮派的教父级人物。理查德最后点了根烟，掏出那张照片，让它随风飘去。<br>然而理查德并不知道，鼠头男里克特并没有被他完全掐死。</p><h4 id="头盔男"><a href="#头盔男" class="headerlink" title="头盔男"></a>头盔男</h4><p><img src="22.png"><br>头盔男也是为50BLESsings工作的一员，但他和鼠头男里克特一样，对组织的底细并不清楚。但他十分享受由杀戮带来的快感，但很快他对这项工作本身产生了怀疑。在一次偶然的机会中，头盔男发现了组织的重要地点信息——一家中餐馆。发现此事的50BLESsings随即派遣鸡头男理查德刺杀了正在苏联人公寓屠杀的头盔男。</p><h4 id="动物五人组"><a href="#动物五人组" class="headerlink" title="动物五人组"></a>动物五人组</h4><p><img src="1.png"></p><center><font size=1>虎头面具男托尼</font></center><p><img src="3.png"></p><center><font size=1>斑马面具男科里</font></center>在鸡头男的事迹爆红后，同样拥有者强烈民族情绪的五个人成立了一个小团体，他们打算模仿鸡头男袭击迈阿密里的苏联人，获得上头条的机会。斑马面具男科里、虎头面具男托尼、天鹅面具姐弟艾莉克斯和艾什，以及熊头面具男马克开始策划并实施一次又一次屠杀案。<p><img src="2.png"></p><center><font size=1>天鹅面具姐弟</font></center><p><img src="4.png"></p><center><font size=1>熊头面具男马克</font></center><h4 id="警探帕尔多"><a href="#警探帕尔多" class="headerlink" title="警探帕尔多"></a>警探帕尔多</h4><p><img src="5.png"><br>帕尔多是迈阿密警署的一位警探，性格十分特立独行，但同事们都很尊重他。不过帕尔多是一个名副其实的双重人格患者，在侦查过程中，如果遇到阻碍，他总是会屠杀掉当场的所有人，并在同事们赶到现场时亮出警官证，无辜地表示：“这里刚刚发生了一桩大案子，我已经拿到一些物证了，说实话有些时候这座城市真的很让人无语……”<br>这样的双重人格让帕尔多明白，如果不尽快找个替罪羊，海量的证据在等着他。于是他借以调查五人组犯下的案子为由，来到天鹅面具姐弟家中。奈何天鹅姐弟中的姐姐艾莉克斯经验丰富，发现了帕尔多车上被绑着的苏联帮派成员，周旋着让帕尔多的嫁祸计划破产了。<br>但双重人格让帕尔多并没有对嫁祸计划的破产感到失望。一天帕尔多在家中整理东西时发现自己的配枪不见了，惊慌地返回昨天他调查的凶杀现场，然而那个死掉的被害者居然活着，并且手里还拿着他的配枪。<br><img src="18.png"><br><img src="19.png"><br>很明显，是帕尔多杀了被害者，但他自己并不知道。转场来到警署，署长正在质问帕尔多众多屠杀案中有关于他的线索，帕尔多知道事情败露，于是血洗警署，但最后逃出警署时被特警围攻击毙了。<br><img src="20.png"><br>帕尔多死了吗？不他并没有死，找枪和血洗警署只是他做的一个梦。他的另一个人格不断渴求有人能够前来逮捕他，揭发他的罪行。帕尔多警探一直在杀戮的快感和自责的边缘中寻找着渺茫的平衡。</p><h4 id="作家埃文"><a href="#作家埃文" class="headerlink" title="作家埃文"></a>作家埃文</h4><p><img src="8.png"><br>自从夏威夷采访回国后，埃文再也没动过笔。当鸡头男的事迹开始爆红之际，埃文看到了非常有意思的东西，想通过记录国内这场前所未有的民粹主义浪潮写一本书。埃文似乎手里握着警探帕尔多的某个把柄，一次又一次通过帕尔多的帮助了解了苏联帮派等组织和事情的内幕。一次偶然的机会他联系上了鼠头男里克特，希望里克特能把他所知的东西告诉他。此时的里克特刚刚从鸡头男理查德的死亡之手中逃出，他向埃文提出用两张能够带走他和他母亲远离的机票作为交换。埃文爽快地答应了，于是鼠头男将“迈阿密热线”告诉了埃文。</p><h4 id="太子"><a href="#太子" class="headerlink" title="太子"></a>太子</h4><p><img src="9.png"><br>自父亲死于鸡头男理查德之手后，太子凭借着毒辣的手段坐上了帮派头把交椅。在这个过程中有哥伦比亚帮派趁虚占领了这个苏联帮派的毒品生意。太子很是气愤，亲自下场收拾了哥伦比亚帮派。不过太子自己也是个瘾君子，在袭击哥伦比亚帮派过程中，他在幻觉中看到了父亲和父亲的保镖，父亲肯定了太子的作为，认为太子能够撑起家业。<br><img src="21.png"><br>在成功教训了哥伦比亚帮派后，太子沉迷于新型产品。手下劝他不要摄入太多，结果太子没有听进去，进入了一个前所未有的幻觉场景。在这个场景中，他成功屠杀了自己身边的手下，并刺杀了前来踢馆的五人组。在最后杀掉天鹅姐弟后，太子眼前出现了一条彩虹大道。太子感叹道：“这就是我一直追寻的东西啊！”于是自认为天下无敌的太子踩上了彩虹大道，最后摔死在大街上，由帕尔多为他收尸。</p><h4 id="副手"><a href="#副手" class="headerlink" title="副手"></a>副手</h4><p><img src="10.png"><br>副手是自太子父亲在位时就为帮派尽心尽力的元老级人物。当帮助太子登上帮派头椅之后，他想退出帮派过自己的小生活。太子很爽快地答应了他，让他干最后一票之后就可以回去了。于是副手袭击了哥伦比亚帮派的一个会所，并且找到了一大包美金。副手兴高采烈地驱车回家。结果第二天醒来发现女友和钱都不见了。女友的桌上还留着一张字条：“亲爱的，如果你是我，我相信你也会做出同样的选择的。”副手被女友抛弃了，他开着车，一次又一次拨打女友的电话，那头始终传来“Wrong Number”的回应。最后这个不断摄入着产品，死前一直念叨着他女友的名字的副手，死于前来夜总会屠杀的五人组手中。</p><h4 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h4><p>1991年12月28日，埃文的书成功出版，埃文本人被电视台采访。鼠头男里克特和母亲在某处的海滩上晒着太阳，看着埃文出版的书。警探帕尔多则坐在一个房间里的地上摆弄着那把配枪。而“名人”鸡头男理查德最终锒铛入狱。就在这时，收音机里传来紧急插播。<br>50BLESsings成功同时刺杀了美苏两国最高领导人，引发了苏联方面的强烈震动。<br>苏联人立刻在古巴基地对迈阿密进行了核战术打击。<br>一切事物都在一瞬间湮灭。</p><h2 id="美式虚无主义"><a href="#美式虚无主义" class="headerlink" title="美式虚无主义"></a>美式虚无主义</h2><p>正如前文所说，如果不认真理清游戏的时间线和人物线，玩家很难明白整个游戏在讲述一个怎样的故事。因为开发者似乎想通过游戏独特的叙事方式去深刻展现“虚无主义”这一主题。实际上很多玩家或许会认为这款游戏的主题是“反战反暴力”，一切起于战争，最后终于战争，时刻充斥着血腥与暴力。但我认同开发者的“虚无主义”主题观点。那么两部曲是怎么体现这一主题的呢？<br>首先，游戏在叙事方面就有所体现。在一代，游戏是线性叙事，围绕鸡头男理查德一个人从开始为50BLESsings工作到成功刺杀苏联帮派老头目的历程展开。游戏中莫名奇妙的“热线电话”，每一关结束时看到的同一个店员，游戏似乎只告诉你：“玩就行了，管那么多干嘛。”但是随着游戏深入，你会发现主角身边事物的变化，这正是引导你思考意义——这一虚无主义研究课题——的开端。<br>在二代，游戏叙事变成了电影磁带回转式叙事，时间线和人物线完全打乱，仿佛告诉玩家：“知道有这件事就行了。”类似的手法，刺激着玩家自己去整理思路，了解来龙去脉，思考意义价值。<br><img src="16.png"><br>其次，游戏在游戏机制强调着虚无主义。游戏的基本机制就是依靠各种方式屠杀，不管你是空手，还是手持冷兵器，或是拿上霰弹枪喷人，只要你能完美屠杀，就算成功。虚无主义不强调过程，它强调的是结果的意义。<br>再者，游戏在美术设计上强调这虚无主义。尽管采用了像素风格，但开发者尽力地用像素点将游戏血腥暴力的一面完美展示出来。因而你常常能在游戏里看到滚落的人头、血流的碎尸等等。但对比血腥画面的精细，游戏对于场景的刻画显得有点力不从心。尽管是在二代建筑内场景得到大大丰富，但对比起来还是相对空旷、单一很多。色块大胆采用深紫色基色，使得美术画面格外魔幻，仿佛就再告诉你：这是个磕了药才看得到的画面。<br>最后，游戏在音乐创作上独具虚无主义色彩。尽管两部曲的BGM都是从各个独立音乐制作人独自创作的电子音乐合集而来，内容与游戏没有太大关系，但其魔幻的旋律、激烈的电子碰撞音，让人感觉身处嗑药夜总会，屠杀获取快乐就好。</p><p>虚无主义本身就有很丰富的内容和流派。对于虚无主义或许人人皆知，但对于美式虚无主义的特点内容可能少有人知。中国道家思想中“大道无为”即有浓厚的虚无主义色彩。它认为真正的“道”，是不需要刻意去做什么事来实现的，一切都需要遵循自然的法则。而美式虚无主义则强调一个人需要通过自身刻意寻找意义，寻不到意义的才能是虚无。</p><p><img src="14.png"></p><center><font size=1>帕尔多的警车后备箱</font></center>游戏中形形色色的人物都在体现着这一特点。拿鼠头男里克特来说，在为组织工作前他是一个无业游民，但他家里有一个母亲需要他赡养，“为了母亲”就成为了里克特的意义所在，这也是组织能够控制里克特的关键所在。当里克特卖命地为组织效力，保护母亲，寻找并维护着这一意义时，里克特却遭鸡头男理查德毒手，险些丧命。他的意义开始动摇：不计一切保护母亲真的就是他的意义了吗？最后的他得到机票带着母亲逃离，也没能逃离核爆的命运，一切意义都化为虚无。美式虚无主义的产生自然与美国的历史文化有着相当深厚的联系。我以前在一本书里看到一个说法，说中国人恋家，美国人恋新。中国人生于黄土大地上，对大地产生了深厚感情，离开了大地就相当于离开了血脉。美国是一个在殖民和探索上用枪炮打造出的国家，探索意味着新的资源，新的资源意味着更好的自己。然而我认为在这个过程中，产生了滋生美式虚无主义的土壤。美国人在激烈的自由竞争中奔波，为了自己和自己的小团体不断拼搏。等到五六十岁之际，小有所成也罢，如果一事无成，回首半生，他们心中将会是什么滋味？活了大半生，干了无数事，落得如此下场，有何意义？<p><img src="7.png"></p><p>猪头男曲终梦醒，醒来时子弹已经夺走性命。<br>鼠头男命悬一线，最后带着母亲隐居一处。<br>头盔男意见天机，未曾想被反将一军。<br>帕尔多自我矛盾，痛苦挣扎永无止境。<br>太子自我膨胀，以为天下无敌却死于己手。<br>副手脱离苦海，随即溺于爱河苦等空号（Wrong Number）。</p><p>即便是迈阿密这座繁华都市，最终也免不了核战术打击夷为平地，遭遇和旧金山一样的命运。</p><p>有意思的是，在二代被打乱的时间线中，游戏中后期部分则是回顾了一切的最开始——鬼狼小队在夏威夷。在副官拿起霰弹枪，跨入苏军基地外围，BGM响起的那一刻，我明白了这部作品的虚无主义意义何在。<br>The Way Home<br>上校说，小伙子们，做完这最后一个任务，你们就能回家了。<br>在那时，四人钻在一起，畅谈着回家后的人生规划。<br>黑人小哥想开一家酒吧，蒙面胖子想当一名教师，副官想开一家便利店。<br>这一切都印在了理查德脑海中。<br>即便是理查德在迈阿密为组织工作、神志不清的那段时间，<br>理查德始终坚持去酒吧、录像店和便利店，<br>每一次看到的店员，<br>都是那个死于旧金山的那位副官。<br><img src="hotline-miami-1270919-1280x0.jpeg"></p><p>我们的意义，也许是虚无的。<br>但它总能在回家的路上变得渐渐清晰起来。</p>]]></content>
    
    
    <summary type="html">从《迈阿密热线》两部曲浅谈美式虚无主义</summary>
    
    
    
    
    <category term="随笔" scheme="https://www.tevinson997.space/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>沉在酒瓶底的C++</title>
    <link href="https://www.tevinson997.space/2021/06/07/%E6%B2%89%E5%9C%A8%E9%85%92%E7%93%B6%E5%BA%95%E7%9A%84C++/"/>
    <id>https://www.tevinson997.space/2021/06/07/%E6%B2%89%E5%9C%A8%E9%85%92%E7%93%B6%E5%BA%95%E7%9A%84C++/</id>
    <published>2021-06-06T16:00:00.000Z</published>
    <updated>2021-06-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在是晚上十点半，这家公司的办公大楼灯火依旧，不见有人想要离开大楼的一点点迹象。这也难怪，这家公司正处于快速上升期，生产的软件广受用户欢迎。公司上层也拿出了相当的诚意“狠狠地”奖励了相关的员工。而且几乎每个参加了公司重点项目的员工都收到了奖励，只是多少的问题。当然作为小组负责人的老贾也被数额庞大的奖金“砸”了一番。</p><p>但是今天晚上，老贾在工位上喝醉了。</p><p>老贾今年正好奔三，毕业于某名牌大学计算机系本科。单身，从未谈过恋爱，按他自己的话来说，活了小半辈子从来就没遇见值得他喜欢、爱和守护的那个她。不少同事还半开玩笑地说他是个同性恋，毕竟在业界也有句揶揄话叫“某名牌大学是男同的大本营”。大三的时候学院要求在读生必须到企业顶岗实习，还是小贾的老贾进入了一家大厂实习，靠着出色的工作能力被高层相中，签订了合同。按照合同，小贾一拿到毕业证就成为了这家大厂的正式员工。</p><p>毕竟是大厂，薪水待遇都是业界高水平。得益于公司体系的成熟，实际能做的工作也很少。满腔热血、想要在业界大干一番的小贾正式进入公司后才发现理想落空了，很是不甘。陆陆续续工作了三年后，他辞职了。</p><p>取而代之的是他在现在这家成立不满五年的中型互联网公司的四年。作为C++底层开发，老贾为公司立下了汗马功劳。但这家公司的高层似乎不怎么欣赏老贾。</p><p>老贾平时的爱好很少，不过他对啤酒情有独钟。你如果和他坐同一桌，他会手把手地教你怎么品出用了小麦芽和只用大麦芽酿出的啤酒的味道差别。他把自己的账单画成了三大块，一块是生活必需，一块是打给住在老家的老母亲的生活费，最后一块便是他用于购买世界各地各式啤酒的钱。</p><p>尽管如此，老贾的酒量并不如外人所知的那么好。在人事部主任生日宴会那天，一个喝高兴了的股东灌了老贾二两高度烧酒。结果老贾摇摇晃晃回到公寓吐了一晚上。</p><p>现在老贾走到了工位外边的阳台上。他靠着铁栏杆，怀里抱着二锅头，俯视着城市夜景。<br><img src="NightCity.jpg"></p><center><font size=1>图片原作者:ArseniXC</font></center><center><font size=1>https://www.pixiv.net/artworks/74324801</font></center>曾经那个意气风发的小贾去哪里了？<p>现在这个圆润油腻的老贾是谁？</p><p>家里的母亲如果不是身体健康的话那个姓贾的会浪到哪里去？</p><p>老贾心里很不是滋味。</p><p>室内橘黄色的灯光透过落地窗射到阳台上，同事们孜孜不倦敲打键盘的清脆声音不断传入耳中。</p><p>老贾突然发现二锅头的瓶盖不见了，他正想返身回到工位上，却瞥见了一个人。</p><p>那个人叫小杨，二十三岁，是老贾的后辈兼校友。出于学院的要求，小杨和当年的小贾一样来到了这家公司实习。作为校友的老贾自然很热情地接待了他。</p><p>小杨在实习岗位上工作相当卖力，这让老贾看到了七年前的自己。</p><p>此时小杨正在工位上勤勤恳恳地解决开发问题。</p><p>老贾顿时一阵后悔。</p><p>自己年轻时候的理想被无形的“刽子手”残忍杀害，如今自己也变成了“刽子手”，一边喊着“怀念青春”的谎言一边把匕首刺进这个叫做小杨的理想的咽喉中。</p><p>想到这里老贾的头又开始晕了。</p><p>于心不忍，老贾打算向小杨搭话。但一时半会儿想不到什么话题。</p><p>“小杨啊，我想转行。”</p><p>“噢，那就看情况用\n和endl。”</p><p>先念<br>2021.06.07<br>于成都</p>]]></content>
    
    
    <summary type="html">原创微小说</summary>
    
    
    
    
    <category term="随笔" scheme="https://www.tevinson997.space/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>微积分基本定理的推广：格林公式的推导及其证明</title>
    <link href="https://www.tevinson997.space/2021/05/20/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86%E7%9A%84%E6%8E%A8%E5%B9%BF%EF%BC%9A%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%85%B6%E8%AF%81%E6%98%8E/"/>
    <id>https://www.tevinson997.space/2021/05/20/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86%E7%9A%84%E6%8E%A8%E5%B9%BF%EF%BC%9A%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%85%B6%E8%AF%81%E6%98%8E/</id>
    <published>2021-05-19T16:00:00.000Z</published>
    <updated>2021-05-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习背景"><a href="#学习背景" class="headerlink" title="学习背景"></a>学习背景</h2><p>近来在学习多元向量值函数积分学的时候学习到了“微积分基本定理的推广”一章中的格林（Green）公式时，我在理解公式含义时遇到了困难。并且大部分资料里面也只给出了格林公式的证明，我也没查找到公式的推导。恰巧在知乎上看到一篇关于格林公式的回答（相关链接放在本文文末），收获颇深。于此拾人牙慧，将格林公式的推导和证明完整演绎一遍。</p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在物理学研究中经常遇到这样的问题：一个矢量沿着一段曲线运动，求这个矢量在运动过程中的矢量积。比较经典的例子就是变力沿曲线做功问题。根据“先易后难”的研究思路，我们对于此问题的研究限定在平面内的变力和封闭曲线。本来对于这个问题我们的思路是十分清晰的：将封闭曲线细分为无数个小段，确定变力F在每个小段的向量值，作内积，求和取极限（或者说在整个曲线上进行积分）就可以了。这是单纯地从微积分基本思想来认识这个问题的。虽然看起来理论上可行，但实际操作的时候，我们很容易遇到难题：这个曲线能不能用方程表示出来？每一小段和变力的夹角如何？等等。</p><h2 id="公式的推导"><a href="#公式的推导" class="headerlink" title="公式的推导"></a>公式的推导</h2><p>我们今天的主角乔治·格林（George Green）爵士在十九世纪初期时也在思考这个问题。如何求变力沿着封闭平面曲线内做的功？格林爵士深谙研究“先易后难”的方法，因此他首先考虑简单的封闭平面曲线：矩形。</p><p><img src="1.png"><br>先研究变力沿着此矩形在逆时针方向上的做功，很显然，只需将矩形分为四段，每段对应变力的分量，进行一元积分即可。</p><p>然后我们的格林爵士跨出了重要一步，他把两个矩形拼在了一起：</p><p><img src="2.png"><br>也许我们还看不出来这一步如何重要，但若仔细思考，我们会发现：在两个矩形重合的那条边上，由于变力F是x和y的二元变量，F在这条边上两个方向的做功和为零。也就说当两个矩形拼接在一起时，它们重合的边就可以忽略了。</p><p>也许我们的格林爵士写到这里的时候就情不自禁地笑出了声。<br><img src="Laugh.gif"></p><p>为什么？</p><p>我们本来是要求一个曲线积分，但经过格林爵士的捣鼓过后，就变成了这样：</p><p><img src="3.png"><br>如果你熟悉微积分教材的话，应该就能一眼看出来这是大多数教科书推导二重积分的例图。<br>先别急着下结论。我们本来的想法是把封闭曲线分成无数小段来进行积分，现在我们的格林爵士把封闭曲线围城的区域D分成无数个小矩形，这些小矩形内部重合部分积分为零，因此所有小矩形的积分就是小矩形们最外围的近似的原曲线的积分。<br>这样一来，我们就可以窥见封闭曲线的积分和封闭平面区域的积分有着某种关系。</p><p>有了这样的微分矩形，我们就可以着手开始计算了。</p><p><img src="4.png"><br>如图我们任取一个微分矩形。不妨设变力F在A,B,C,D四点的大小为：<br>$$ F_A = (P(x, y), Q(x, y)) $$ $$ F_B = (P(x + dx, y), Q(x + dx, y)) $$ $$ F_C = (P(x + dx, y + dy), Q(x + dx, y + dy)) $$ $$ F_D = (P(x, y + dy), Q(x, y + dy)) $$<br>根据力做功，我们可以求出变力F在各边上做的功：<br>$$ W_{AB} = P(x, y)dx $$ $$ W_{BC} = Q(x + dx, y)dy $$ $$ W_{CD} = P(x + dx, y + dy)dx $$ $$ W_{DA} = Q(x, y + dy)dy $$ $$ W_{ABCDA} = P(x, y)dx + Q(x + dx, y)dy + P(x + dx, y + dy)dx + Q(x, y + dy)dy $$<br>由于微分矩形足够小，我们不妨认为力沿着边移动时大小不变，于是上面的式子可以改写为：<br>$$ W_{AB} = P(x, y)dx（不变） $$ $$ W_{BC} = Q(x + dx, y)dy（不变） $$ $$ W_{CD} = -W_{DC} = -P(x, y + dy)dx $$ $$ W_{DA} = -W_{AD} = Q(x, y)dy $$ $$ W_{ABCDA} = P(x, y)dx + Q(x + dx, y)dy - P(x, y + dy)dx - Q(x, y)dy $$ $$ = - \frac{\partial P(x, y)}{\partial y}dydx + \frac{\partial Q(x, y)}{\partial x}dxdy $$ $$ = (\frac{\partial Q(x, y)}{\partial x} - \frac{\partial P(x, y)}{\partial y})dxdy $$</p><p>这就是变力在微分矩阵上的做功微元。接下来只需求和取极限（或者说是积分）就可以得到格林公式了。于是我们的格林爵士写下了这一千古绝笔：<br>$$ \oint_L Pdx + Qdy = \iint_D (\frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y})dxdy $$</p><h2 id="公式的证明"><a href="#公式的证明" class="headerlink" title="公式的证明"></a>公式的证明</h2><p>公式虽然给出来了，但没有严格的证明它就算不上是真正的公式。关于本公式的证明已有很多，此处引用我所用的教科书上的证明。</p><p>证明：<br>(1)D为单连通区域, 先证D可同时表示为以下两种形式:<br>$$ D = \lbrace (x, y) | y_1(x) \leq y \leq y_2(x), a \leq x \leq b \rbrace $$ $$ = \lbrace (x, y) | x_1(y) \leq x \leq x_2(y), c \leq y \leq d \rbrace $$的情形(这时平行于x轴或y轴的直线与区域D的边界至多相交于两点), 这样的区域称为标准区域, 如图</p><p><img src="5.png"><br>在这种情况下, 由二重积分的计算法有<br>$$ \iint_D (-\frac{\partial P}{\partial y})dxdy $$ $$ = \int_a^b dx \int_{y_1(x)}^{y_2(x)} (-\frac{\partial P}{\partial y})dy $$ $$ \int_a^b \lbrace P[x, y_1(x)]dx - P[x, y_2(x)]dx $$ $$ \int_a^b P[x, y_1(x)]dx + \int_b^a P[x, y_2(x)]dx $$另一方面, 由第二类曲线积分的性质及计算法有<br>$$ \oint_L P(x, y)dx = \int_{L_1} P(x, y)dx + \int_{L_2} P(x, y)dx $$ $$ = \int_a^b P[x, y_1(x)]dx + \int_b^a P[x, y_2(x)]dx $$故<br>$$ \iint_D (-\frac{\partial P}{\partial y})dxdy = \oint_L P(x, y)dx $$类似地, 将D表示为<br>$$ \iint_D \frac{\partial Q}{\partial x}dxdy = \oint_L Q(x, y)dy $$这样就得到格林公式<br>$$ \iint_D (\frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y})dxdy = \oint_L Pdx + Qdy $$若区域D不是标准区域, 我们只考虑如图所示的区域:</p><p><img src="6.png"><br>在该区域上, 平行于y轴的直线与D的边界的交点可能会多于两个. 现用辅助线(光滑曲线)将D分成两个标准区域D1与D2, 这时对D1与D2可分别应用格林公式. 将两个公式加起来, 由于辅助线为两区域的公共边界, 在公式中取向相反, 故它们所对应的曲线积分相互抵消, 因此格林公式仍然成立.<br>(2)D为复连通区域. 用辅助线(光滑曲线)将外边界曲线L1上一点M与内边界曲线L2上一点N联结起来, D就变为单连通区域, 如图:</p><p><img src="7.png"><br>这样就可以应用格林公式, 沿其正向边界积分, 得<br>$$ \iint_D (\frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y})dxdy = (\oint_{L_1} + \int_{MN} + \oint_{L_2} + \int_{NM})Pdx + Qdy $$ $$ = \oint_{L_1}Pdx + Qdy + \int_{L_2} Pdx + Qdy $$其中外边界曲线L1取正向为逆时针方向, 内边界曲线L2取正向为顺时针方向. 同时格林公式还可以通过类似方法推广到有有限个”洞”的复连通区域上.<br>故格林公式$$ \iint_D (\frac{\partial Q}{\partial x} - \frac{\partial P}{\partial y})dxdy = \oint_L Pdx + Qdy $$成立.<br>证毕.</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>由格林公式的推导我们可以看到平面内封闭曲线和其围成的区域之间的关系。我们可以用连通区域的边界情况了解连通区域本身的情况。因此格林公式建立了平面封闭曲线积分到连通区域二重积分的桥梁。</p><p>这就好比认识一个人，自我介绍并不能解决问题，要深入了解这个人就必须从他或她身边的事物开始认识，比如他或她的人际关系、做事风格和举止谈吐等等。这不禁让我想起很久以前看到的“颜回偷食”的典故：</p><p>孔子穷乎陈、蔡之间，藜羹不斟，七日不尝粒，昼寝。颜回索米，得而焚之，几熟。孔子望见颜回攫取其甑中而食之。选间，食熟，谒孔子而进食。孔子佯为不见之。孔子起曰：“今者梦见先君，食洁而后馈。”颜回对曰：“不可。向者煤室入甑中，弃食不详，回攫而饭之。”孔子曰：“所信者目也，而目犹不可信；所恃者心也，而心犹不足恃。弟子记之，知人固不易矣。”孔子穷乎陈、蔡之间，藜羹不斟，七日不尝粒，昼寝。颜回索米，得而焚之，几熟。孔子望见颜回攫取其甑中而食之。选间，食熟，谒孔子而进食。孔子佯为不见之。孔子起曰：“今者梦见先君，食洁而后馈。”颜回对曰：“不可。向者煤室入甑中，弃食不详，回攫而饭之。”孔子曰：“所信者目也，而目犹不可信；所恃者心也，而心犹不足恃。弟子记之，知人固不易矣。”（《孔子家语》卷五“困厄”第二十）</p><p>孔子素日识回，认为颜回值得信任。但亲眼看见颜回偷食，孔子产生了动摇。何也？全面认识一个人很难做到，何况身为他人的人想要了解另一个人更加困难。孔子仅从一个“微分矩阵”就想看见颜回这一整个“第二类封闭平面曲线积分”，难免会有出入。他平日所见的颜回则是从各个“微分矩阵”来看的，所以相对较为全面，信任了颜回。</p><p>我们认识的不管是人还是事物，都很难面面俱到，因为我们的观察是离散的，没有办法像积分一样全面认识，尽管如果能全面观察事物的外围就能看到本质。但我们能做的就是尽可能多地从不同角度认识它，力求让自己的观察“可积”。</p><p><img src="America.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 格林公式的几何意义是什么？[EB/OL].<a href="https://www.zhihu.com/answer/165988374/">https://www.zhihu.com/answer/165988374/</a><br>[2] 电子科技大学数学科学学院.微积分.下册[M].北京:高等教育出版社出版社,2019. 173-175<br>*本页插画引用自画师mocha，画师url:<a href="https://www.pixiv.net/users/648285/">https://www.pixiv.net/users/648285/</a></p>]]></content>
    
    
    <summary type="html">格林公式的推导及其证明</summary>
    
    
    
    
    <category term="数学" scheme="https://www.tevinson997.space/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>明月与红日：为什么太阳不能成为常见的文学意象？</title>
    <link href="https://www.tevinson997.space/2021/05/17/%E6%98%8E%E6%9C%88%E4%B8%8E%E7%BA%A2%E6%97%A5%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%AA%E9%98%B3%E4%B8%8D%E8%83%BD%E6%88%90%E4%B8%BA%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E5%AD%A6%E6%84%8F%E8%B1%A1%EF%BC%9F/"/>
    <id>https://www.tevinson997.space/2021/05/17/%E6%98%8E%E6%9C%88%E4%B8%8E%E7%BA%A2%E6%97%A5%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A4%AA%E9%98%B3%E4%B8%8D%E8%83%BD%E6%88%90%E4%B8%BA%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E5%AD%A6%E6%84%8F%E8%B1%A1%EF%BC%9F/</id>
    <published>2021-05-16T16:00:00.000Z</published>
    <updated>2021-05-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>近来在搜寻资料的时候，无意间发现一个很有意思的现象：无论是古今，还是中外，文学作品（或者说艺术作品）中明月是出席最频繁的“主角”了。相比之下我们的红日先生就显得有些尴尬，你几乎很少看到单独地、直接地表现太阳的作品。</p><p>“床前明月光，疑是地上霜”，这句唐诗是无数中国人小时候会诵的第一句诗；嫦娥奔月、玉兔捣药、吴刚伐桂、牛郎织女等等传说是多少年幼孩童向往的中国神话；《荷塘月色》《二泉映月》《月亮与六便士》等等文艺作品又何尝不是人们心中的美景。这些东西，无不例外与明月有关。而我们的太阳先生，在我的印象中除了希腊神话中与光明神阿波罗合体的太阳神赫利俄斯和中国神话中众人一体的太阳神帝俊、神农氏和羲和等人，就再无特别的文学意义上的相关物了。</p><p>太阳作为自然界的能量之源，按道理他的地位应当是相当高的。是日出让大地重焕光明，是日照让气象获得温度，是日辉让万物充满生机。离开太阳，我们美丽的蓝色星球将迅速冷却，成为一颗毫无奇迹可言的冰星。而我们的明月女士，更像是躲在太阳先生身后的贵族大小姐。她在太阳先生回府休整的时候偷偷溜出来玩耍。她的温柔光辉来自太阳的恩赐，因而有时这份光辉总是会缺一块少一片。但她播撒的光辉对于地球上靠光合作用生活的贪婪家伙们来说远远不够。</p><p>尽管很多方面比不上太阳先生，然而明月女士依然赢得了她在文学上的崇高地位。</p><p>明月播撒的光辉是纯白的。在人们心中，这份纯白的光辉是纯正无比的，是世间智者圣人所追求的那份最纯正的真理的颜色。因而这份光辉是淡薄的，是空寂的，是脱俗的。</p><p>明月播撒的光辉是洁净的。月色不掺有一丝杂色，犹如游子心中久离不回的家乡一样。在那里，有最淳朴的民风，有最温暖的朋友，有最爱的家人。因而这份光辉是母性的，是爱情的，是思乡的。</p><p>明月播撒的光辉是温柔的。月光本身没有可以感知的温度，但当迁客骚人远望她时，内心的孤独寂寞难掩。内心的温度与月光混合，一时竟不知道到底是内心的寒冷还是月光的寒冷。温柔的月光映衬着浩瀚的星空，徒增了迁客骚人的孤寂之感，谁能不因此潸然泪下？</p><p>大文学家苏东坡在千古名篇《赤壁赋》中，面对友人“寄蜉蝣于天地，渺沧海之一粟”的感叹和“哀吾生之须臾，羡长江之无穷”的忧伤，他缓缓道出：</p><p><img src="Chibifu.jpg"></p><p>“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎!且夫天地之间，物各有主,苟非吾之所有，虽一毫而莫取。惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭，是造物者之无尽藏也，而吾与子之所共适。”</p><p>苏子一席话点醒梦中人。明月无尽，仍有盈虚。吾等有限，亦可享无尽之乐。明月何如？</p><p>明月作为高洁、思乡、思人和存世之理的象征，成为了中国古典文学“风花雪月”四大意象之一。不仅在中国，在欧洲文学中明月也有着相似的重要地位。在现代，虽然人们忙于夜生活，欣赏明月的机会逐渐减少，但明月带给我们的感触依旧不减。对于我这种老二次元人来说，陪伴了绫和丛雨丸近千年的是纯白的满月，守护着栞那和众多死神度过悠久岁月的也是纯洁的明月（以上内容分别出自日本美少女公司Yuzusoft发售的游戏《千恋*万花》和《星光咖啡馆与死神之蝶》）。明月作为永恒和孤独的象征，极大地契合着现代人疲惫的心理状态。</p><p><img src="CAT&STRAWBERRY&PANCAKE.jpg"></p><p>明月依靠着她的纯白温柔与盈虚变化，赢得了人们的喜爱。而我们的太阳先生则在人们眼中树立起了牢不可破的至尊形象。</p><p>太阳是万物的主宰，没有太阳人们无法进行正常的生产生活。因而在世界各地的早期文明中，最初的统治者常常伴以太阳的形象出现：古埃及法老王、中国上古时代的帝俊、神农氏和羲和、古日本天皇始祖天照大神等等。阳光的刺眼和强烈的热量让人难以靠近，同样赋予了太阳“神圣不可侵犯”的意象。而阳光的颜色中带有金黄色，与黄金这种贵重金属的颜色很相似，因此这也为太阳的至尊形象添上了一笔。</p><p>太阳先生就这样成为了权利、法律和权威的代言人。</p><p><img src="Sun.jpg"></p><p>不过这样的代言人也不是绝对“无敌”的。每当“天狗食日”时，太阳那绝对的光辉将黯然消逝。人们恐惧着原则和权威的消失，纷纷敲锣打鼓，企图赶走“天狗”这个邪神。这也能反映出太阳尽管在人们心目中的形象算不上特别人性化，但也占有相当的地位。</p><p>鲁迅先生在《拿来主义》一文中写道：“然而尼采究竟不是太阳，他发了疯。”在尼采本来的观点中，他自己的思想不被世人理解，自己的智慧得不到他人的思想，所以“我是太阳，不知道索取，只知道给予”。鲁迅先生简单引用尼采的故事，虽然是为“拿来主义”的总观点服务，但我认为鲁迅先生在这里有弦外之音。太阳代表着绝对和权威的奉献，尼采靠着唯心论企图用所谓的“强力意志”和“超人”来将自己的意识强加于人，事不成反而发了疯。这与太阳的形象背道而驰，何胆敢自诩为太阳？</p><p>不过太阳作为“绝对”的代名词由来已久，早已深入人心。但随着时代的发展，一些全新的艺术领域被开垦出来。末世题材就是其中热门的一个。在末世主题的艺术作品中，常常可以看到这样的故事：人类的所作所为不仅伤害了万物，更伤害了自己。在核冬天的烟尘之下，地面笼罩着黑暗，不见一缕阳光。人们鼓起勇气离开即将枯竭的地下庇护所重回地面试图重建家园，经过九九八十一难后，主角一行人终于看到了核冬天结束后的第一缕阳光。这缕阳光就是希望。在这类作品中，人们长期面临着黑暗带来的恐惧，阳光就成为了希望的代名词。</p><p>也许我们本来就不应该去纠结明月和红日在文学当中的地位如何，毕竟他们的存在本就有着他们自己的意义，无论“人存定理”是否生效。但是文学，或者说是艺术，本来就是人类在认识世界的过程中产生的。我们所赋予的意义，何尝不是丰富了他们的内涵呢？</p>]]></content>
    
    
    <summary type="html">从明月和红日对比浅谈太阳的文学形象</summary>
    
    
    
    
    <category term="随笔" scheme="https://www.tevinson997.space/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>柯西不等式积分形式的两种证明</title>
    <link href="https://www.tevinson997.space/2021/05/13/%E6%9F%AF%E8%A5%BF%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%A7%AF%E5%88%86%E5%BD%A2%E5%BC%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%AF%81%E6%98%8E/"/>
    <id>https://www.tevinson997.space/2021/05/13/%E6%9F%AF%E8%A5%BF%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%A7%AF%E5%88%86%E5%BD%A2%E5%BC%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%AF%81%E6%98%8E/</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-05-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数学背景"><a href="#数学背景" class="headerlink" title="数学背景"></a>数学背景</h2><p>柯西不等式是法国数学家奥古斯丁·路易斯·柯西（Augustin Louis Cauchy）在数学分析的研究中所得到的。但确切的讲，柯西不等式应该被称作“柯西-布尼亚科夫斯基-施瓦茨不等式（Cauchy-Buniakowsky-Schwarz Inequality）”。这是因为后两位数学家彼此独立地将此不等式在积分学中推广，柯西不等式的应用才算真正基本完善。柯西不等式在不等式的证明中有着广泛的应用，因此成为了高等数学的重点研究内容之一。</p><h2 id="学习背景"><a href="#学习背景" class="headerlink" title="学习背景"></a>学习背景</h2><p>在人教版《数学——选修4-5 不等式选讲》中，教材初步向我们介绍了柯西不等式的二维形式<br>$$ (a^2 + b^2)(c^2 + d^2) \geq (ac + bd)^2 $$当且仅当$$ ad = bc $$时等号成立.</p><p>以及n维形式<br>$$ \sum_{i = 1}^{n} { {a_i}^2} \sum_{i=1}^{n} { {b_i}^2} \geq (\sum_{i=1}^{n} { {a_i}{b_i} })^2 $$当且仅当$$ \frac{a_i}{b_i} = \frac{a_j}{b_j} (1 \leq i \leq n, 1 \leq j \leq n且 i,j \in N) $$或$$ a_i, b_i, i=1, 2, 3, …, n 中有至少一方全为零 $$时等号成立.</p><p>高中老师也许还曾告诉过你柯西不等式的其他形式：</p><p>三角形式：$$ \sqrt{ {a^2} + {b^2} } + \sqrt{ {c^2}+{d^2} } \geq \sqrt{ {(a-c)^2} + {(b-d)^2} } $$当且仅当$$ ad = bc且ac + bd \geq 0 $$时等号成立.</p><p>向量形式：$$ \lVert \boldsymbol{\alpha} \rVert \cdot \lVert \boldsymbol{\beta} \rVert \geq \lvert \boldsymbol{\alpha} \cdot \boldsymbol{\beta} \rvert $$当且仅当$$ \boldsymbol{\beta}是零向量,或存在实数k使得\boldsymbol{\alpha} = k \boldsymbol{\beta} $$时等号成立.</p><p>概率论形式：$$ \sqrt{E({X}^2)} \sqrt{E({Y}^2)} \geq \lvert E(XY) \rvert $$当且仅当$$ 存在t_0 \in R,使得P \lbrace y = t_0 X \rbrace = 1 $$时等号成立.</p><p>进入大学后我们接触了线性代数和微积分，而柯西不等式也有对应的形式来“折磨”我们。</p><p>有限线性空间形式（一般形式）：<br>$$ 设V是一线性空间，在V上定义了一个二元实函数，称为内积，记作（\boldsymbol{\alpha}, \boldsymbol{\beta}）$$它具有以下性质:<br>$$ 1.(\boldsymbol{\alpha}, \boldsymbol{\beta}) = (\boldsymbol{\beta}, \boldsymbol{\alpha}) $$ $$ 2.(k \boldsymbol{\alpha}, \boldsymbol{\beta}) = k(\boldsymbol{\alpha}, \boldsymbol{\beta}) $$ $$ (\boldsymbol{\alpha}, \boldsymbol{\beta + \gamma}) = (\boldsymbol{\alpha}, \boldsymbol{\beta}) + (\boldsymbol{\alpha}, \boldsymbol{\gamma}) $$ $$ (\boldsymbol{\alpha}, \boldsymbol{\alpha}) \geq \boldsymbol{0},当且仅当\boldsymbol{\alpha} = \boldsymbol{0}时(\boldsymbol{\alpha}, \boldsymbol{\alpha}) = \boldsymbol{0} $$并定义$$ \lVert \boldsymbol{\alpha }\rVert = \sqrt{(\boldsymbol{\alpha}, \boldsymbol{\alpha})} $$则柯西不等式表达为<br>$$ \lvert (\boldsymbol{\alpha}, \boldsymbol{\beta}) \rvert \leq \lVert \boldsymbol{\alpha} \rVert \lVert \boldsymbol{\beta} \rVert $$当且仅当$$ \boldsymbol{\alpha}与\boldsymbol{\beta}线性相关 $$时等号成立.<br>此形式是柯西不等式的本质形式，理论上其他形式的柯西不等式都是这个形式的变形。</p><h2 id="柯西不等式的积分形式"><a href="#柯西不等式的积分形式" class="headerlink" title="柯西不等式的积分形式"></a>柯西不等式的积分形式</h2><h3 id="“二次函数零点法”"><a href="#“二次函数零点法”" class="headerlink" title="“二次函数零点法”"></a>“二次函数零点法”</h3><p>柯西不等式的积分形式既是数学史上的一大里程碑，也是大学生开始学习高等数学的一大“bug”。首先我们来看看这个“bug”长什么样子：<br>$$ (\int_a^b {f(x)g(x)dx})^2 \leq \int_a^bf^2(x)dx \int_a^bg^2(x)dx $$当且仅当$$ f(x)与g(x)线性相关 $$时等号成立.</p><p>本来这个公式的证明可以直接套用证明一般形式柯西不等式的方法，即“二次函数零点”法。那我们来看看这个通用方法是怎么证明的：</p><p>证明:构造二次函数$$ H(t) =  t^2 \int_a^b {f^2(x)dx} + 2t \int_a^b {f(x)g(x)dx} + \int_a^bg^2(x)dx $$ $$ = \int_a^b{[tf(x) + g(x)]^2} \geq 0 $$<br>则该二次函数至多有一个零点$$ \Delta = 0 $$即$$ (2\int_a^b{f(x)g(x)dx})^2 - 4\int_a^b {f^2(x)dx} \int_a^bg^2(x)dx \leq 0 $$ $$ \therefore (\int_a^b{f(x)g(x)dx})^2 \leq \int_a^b{f^2(x)dx} \int_a^b{g^2(x)dx} $$当且仅当$$ f(x)与g(x)线性相关 $$时等号成立.</p><h3 id="“二重积分法”"><a href="#“二重积分法”" class="headerlink" title="“二重积分法”"></a>“二重积分法”</h3><p>一般来说使用“二次函数零点法”证明就可以了，毕竟这是相当通用的证明方法，能证明本质形式。但若仔细观察积分形式的柯西不等式，也许就会有“新大陆”。<br>我们注意到在不等式中当f(x)与g(x)被积分号分隔时，dx的积分范围就被限制在一个积分号里了，如果把其中一个x换成y，就有了dxdy的形式，是不是很接近二重积分了呢（即应用“定积分与积分变量无关”）？<br>如果把不等式两端都能变成二重积分，那么由于积分限相同，就只需要比较被积函数了。<br>由着这个思路，我们给出“二重积分法”法一：</p><p>证明:$$ 定义积分区域D = \lbrace(x, y) \mid a \leq x \leq b, a \leq y \leq b \rbrace $$ $$ \int_a^b {f^2(x)dx} \int_a^b {g^2(x)dx} = \frac{1}{2}[\iint_D {f^2(x)g^2(y)dxdy} + \iint_D {f^2(y)g^2(x)dxdy}] $$ $$ = \frac{1}{2} \iint_D {[f^2(x)g^2(y) + f^2(y)g^2(x)]dxdy} $$ $$ = \iint_D {\frac{f^2(x)g^2(y) + f^2(y)g^2(x)}{2}dxdy} $$由基本不等式<br>$$ 上式 \geq \iint_D {f(x)f(y)g(x)g(y)dxdy} $$而$$ (\int_a^b {f(x)g(x)dx})^2 = \int_a^b {f(x)g(x)dx} \int_a^b {f(y)g(y)dy} = \iint_D {f(x)f(y)g(x)g(y)dxdy} $$<br>综上所述：$$ (\int_a^b {f(x)g(x)dx})^2 \leq \int_a^bf^2(x)dx \int_a^bg^2(x)dx $$当且仅当$$ f(x)与g(x)线性相关 $$时等号成立。</p><p>此证明的过程为“左推右，右推左，中间推出小结果”的“中间推出小结果”。核心在于利用定积分与积分变量无关的性质，将两个积分的积化作二重积分，把积分问题变成被积函数问题，比较被积函数即可。</p><p>另外一位学长给出了另外一种形式的“二重积分法”，这种方法涉及到变换积分变量及其积分限，难度更高，但核心思想也是将比较积分转化为比较被积函数。此处给出“二重积分法”法二：</p><p>证明：$$ (\int_a^b {f(x)g(x)dx})^2 = \int_a^b{f(x)g(x)dx} \int_a^b {f(y)g(y)dy} $$ $$ = \iint_D {f(x)g(x)f(y)g(y)dxdy} $$ $$ = \int_a^b{dx} \int_a^x {f(x)g(x)f(y)g(y)}dy + \int_a^b {dx} \int_x^b {f(x)g(x)f(y)g(y)}dy $$ $$ = \int_a^b {dx} \int_a^x {f(x)g(x)f(y)g(y)dy} + \int_a^b {dx}\int_a^y {f(x)g(x)f(y)g(y)dx} $$ $$ = \int_a^b {dx} \int_a^x {2f(x)g(x)f(y)g(y)}dy $$ $$ \leq \int_a^b {dx} \int_a^x {(f^2(x)g^2(y) + f^2(y)g^2(x))dy} $$ $$ = \int_a^b {dx} \int_a^x {f^2(x)g^2(y)dy} + \int_a^b {dy} \int_y^b {f^2(x)g^2(y)dx} $$ $$ = \int_a^b {dx} \int_a^x {f^2(x)g^2(y)dy} + \int_a^b {dy} \int_x^b {f^2(x)g^2(y)dy} $$ $$ = \int_a^b {dx} \int_a^b {f^2(x)g^2(y)dy} $$ $$  = \int_a^b {dx} \int_a^b {f^2(x)g^2(y)dy} $$ $$ = \int_a^b {f^2(x)dx} \int_a^b {g^2(x)dx} $$证毕.</p><p>从上述证明中我们看到，此法的过程是直接“左推右”，方向比较简单，其核心确实依旧是用基本不等式进行实质性比较。但方向的简单带来了积分变量和积分限更换的难度，因此不推荐使用法二。</p><h2 id="总结体会"><a href="#总结体会" class="headerlink" title="总结体会"></a>总结体会</h2><p>柯西不等式证明是不等式证明当中的一个重要课题，灵活运用其形式给出相应证明是柯西不等式广泛性的体现。通过将二次积分转化为二重积分，我们得以将积分比较变为被积函数比较，简化了证明。当然不能忘了柯西不等式的本质形式也符合物理世界中“简单而统一”的理论标准，因此它也是一个十分具有物理美的数学内容。</p>]]></content>
    
    
    <summary type="html">使用一元二次方程和二重积分的方法证明柯西不等式积分形式</summary>
    
    
    
    
    <category term="数学" scheme="https://www.tevinson997.space/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
